/*
  *
  *  *  Copyright 2014 Orient Technologies LTD (info(at)orientechnologies.com)
  *  *
  *  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  *  you may not use this file except in compliance with the License.
  *  *  You may obtain a copy of the License at
  *  *
  *  *       http://www.apache.org/licenses/LICENSE-2.0
  *  *
  *  *  Unless required by applicable law or agreed to in writing, software
  *  *  distributed under the License is distributed on an "AS IS" BASIS,
  *  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  *  *  See the License for the specific language governing permissions and
  *  *  limitations under the License.
  *  *
  *  * For more information: http://www.orientechnologies.com
  *
  */


options {
	TRACK_TOKENS = true;
  	JDK_VERSION = "1.6";
  	MULTI=true;
  	VISITOR=true;
  	STATIC=false;
  	USER_CHAR_STREAM = true ;
  	JAVA_UNICODE_ESCAPE=true;
  	NODE_PREFIX="O";
}

PARSER_BEGIN(OrientSql)

package com.orientechnologies.orient.core.sql.parser;

import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import com.orientechnologies.orient.core.sql.OCommandSQLParsingException;
import com.orientechnologies.orient.core.exception.OQueryParsingException;

/** Orient Database Sql grammar. */
public class OrientSql {

  class ValidationStats{
    int luceneCount = 0;
  }
  private int inputParamCount = 0;

  private List<ValidationStats> validationStats = new ArrayList<ValidationStats>();

    public OrientSql(InputStream stream) {
      this(new JavaCharStream(stream));
    }

}

PARSER_END(OrientSql)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}


/* reserved words */
TOKEN:
{
	< SELECT: ( "s" | "S" ) ( "e" | "E" ) ( "l" | "L" ) ( "e" | "E" ) ( "c" | "C" ) ( "t" | "T" ) >
	|
	< TRAVERSE: ( "t" | "T") ( "r" | "R") ( "a" | "A") ( "v" | "V") ( "e" | "E") ( "r" | "R") ( "s" | "S") ( "e" | "E") >
	|
	< MATCH: ( "m" | "M" ) ( "a" | "A" ) ( "t" | "T" ) ( "c" | "C" ) ( "h" | "H" ) >
	|
	< INSERT: ( "i" | "I" ) ( "n" | "N" ) ( "s" | "S" ) ( "e" | "E" ) ( "r" | "R" ) ( "t" | "T" ) >
	|
	< CREATE: ( "c" | "C" ) ( "r" | "R" ) ( "e" | "E" ) ( "a" | "A" ) ( "t" | "T" ) ( "e" | "E" ) >
	|
	< DELETE: ( "d" | "D" ) ( "e" | "E" ) ( "l" | "L" ) ( "e" | "E" ) ( "t" | "T" ) ( "e" | "E" ) >
	|
	< VERTEX: ( "v" | "V" ) ( "e" | "E" ) ( "r" | "R" ) ( "t" | "T" ) ( "e" | "E" ) ( "x" | "X" ) >
	|
	< EDGE: ( "e" | "E" ) ( "d" | "D" ) ( "g" | "G" ) ( "e" | "E" ) >
	|
	< UPDATE: ( "u" | "U" ) ( "p" | "P" ) ( "d" | "D" ) ( "a" | "A" ) ( "t" | "T" ) ( "e" | "E" ) >
	|
	< UPSERT: ( "u" | "U" ) ( "p" | "P" ) ( "s" | "S" ) ( "e" | "E" ) ( "r" | "R" ) ( "t" | "T" ) >
	|
	< FROM: ( "f" | "F" ) ( "r" | "R" ) ( "o" | "O" ) ( "m" | "M" ) >
	|
	< TO: ( "t" | "T" ) ( "o" | "O" ) >
	|
	< WHERE: ( "w" | "W" ) ( "h" | "H" ) ( "e" | "E" ) ( "r" | "R" ) ( "e" | "E" ) >
	|
	< WHILE: ( "w" | "W" ) ( "h" | "H" ) ( "i" | "I" ) ( "l" | "L" ) ( "e" | "E" ) >
	|
	< INTO: ( "i" | "I" ) ( "n" | "N" ) ( "t" | "T" ) ( "o" | "O" ) >
	|
	< VALUE: ( "v" | "V" ) ( "a" | "A" ) ( "l" | "L" ) ( "u" | "U" ) ( "e" | "E" ) >
	|
	< VALUES: ( "v" | "V" ) ( "a" | "A" ) ( "l" | "L" ) ( "u" | "U" ) ( "e" | "E" ) ( "s" | "S" )>
	|
	< SET: ( "s" | "S" ) ( "e" | "E" ) ( "t" | "T" ) >
	|
	< ADD: ( "a" | "A" ) ( "d" | "D" ) ( "d" | "D" ) >
	|
	< PUT: ( "p" | "P" ) ( "u" | "U" ) ( "t" | "T" ) >
	|
	< MERGE: ( "m" | "M" ) ( "e" | "E" ) ( "r" | "R" ) ( "g" | "G" ) ( "e" | "E" ) >
	|
	< CONTENT: ( "c" | "C" ) ( "o" | "O" ) ( "n" | "N" ) ( "t" | "T" ) ( "e" | "E" ) ( "n" | "N" ) ( "t" | "T" )  >
	|
	< REMOVE: ( "r" | "R" ) ( "e" | "E" ) ( "m" | "M" ) ( "o" | "O" ) ( "v" | "V" ) ( "e" | "E" ) >
	|
	< INCREMENT: ( "i" | "I" ) ( "n" | "N" ) ( "c" | "C" ) ( "r" | "R" ) ( "e" | "E" ) ( "m" | "M" ) ( "e" | "E" ) ( "n" | "N" ) ( "t" | "T" ) >
	|
	< AND: ( "a" | "A" ) ( "n" | "N" ) ( "d" | "D" ) >
	|
	< OR: ( "o" | "O" ) ( "r" | "R" ) >
	|
	< NULL: ( "N" | "n" ) ( "U" | "u" ) ( "L" | "l" ) ( "L" | "l" ) >
	|
	< DEFINED: ( "D" | "d" ) ( "E" | "e" ) ( "F" | "f" ) ( "I" | "i" ) ( "N" | "n" ) ( "E" | "e" ) ( "D" | "d" ) >
    |
    < ORDER: ( "o" | "O" ) ( "r" | "R" ) ( "d" | "D" ) ( "e" | "E" ) ( "r" | "R" ) >
	|
	< GROUP: ( "g" | "G" ) ( "r" | "R" ) ( "o" | "O" ) ( "u" | "U" ) ( "p" | "P" ) >
	|
	< BY: ( "b" | "B" ) ( "y" | "Y" ) >
	|
	< LIMIT: ( "l" | "L" ) ( "i" | "I" ) ( "m" | "M" ) ( "i" | "I" ) ( "t" | "T" ) >
	|
	< SKIP2: ( "s" | "S" ) ( "k" | "K" ) ( "i" | "I" ) ( "p" | "P" ) >
	|
	< BATCH: ( "b" | "B" ) ( "a" | "A" ) ( "t" | "T" ) ( "c" | "C" ) ( "h" | "H" ) >
	|
	< OFFSET: ( "o" | "O" ) ( "f" | "F" ) ( "f" | "F" ) ( "s" | "S" ) ( "e" | "E" ) ( "t" | "T" ) >
	|
	< TIMEOUT: ( "t" | "T" ) ( "i" | "I" ) ( "m" | "M" ) ( "e" | "E" ) ( "o" | "O" ) ( "u" | "U" ) ( "t" | "T" ) >
	|
	< ASC: ( "a" | "A" ) ( "s" | "S" ) ( "c" | "C" ) >
	|
	< AS: ( "a" | "A" ) ( "s" | "S" ) >
	|
	< DESC: ( "d" | "D" ) ( "e" | "E" ) ( "s" | "S" ) ( "c" | "C" ) >
	|
	< FETCHPLAN: ( "f" | "F" ) ( "e" | "E" ) ( "t" | "T" ) ( "c" | "C" ) ( "h" | "H" ) ( "p" | "P" ) ( "l" | "L" ) ( "a" | "A" ) ( "n" | "N" ) >
	|
	< RETURN: ( "r" | "R" ) ( "e" | "E" ) ( "t" | "T" ) ( "u" | "U" ) ( "r" | "R" ) ( "n" | "N" ) >
	|
	< BEFORE: ( "b" | "B" ) ( "e" | "E" ) ( "f" | "F" ) ( "o" | "O" ) ( "r" | "R" ) ( "e" | "E" ) >
	|
	< AFTER: ( "a" | "A" ) ( "f" | "F" ) ( "t" | "T" ) ( "e" | "E" ) ( "r" | "R" ) >
	|
	< LOCK: ( "l" | "L" ) ( "o" | "O" ) ( "c" | "C" ) ( "k" | "K" ) >
    |
    < RECORD: ( "r" | "R" ) ( "e" | "E" ) ( "c" | "C" ) ( "o" | "O" ) ( "r" | "R" ) ( "d" | "D" ) >
    |
    < WAIT: ( "w" | "W" ) ( "a" | "A" ) ( "i" | "I" ) ( "t" | "T" ) >
    |
    < RETRY: ( "r" | "R" ) ( "e" | "E" ) ( "t" | "T" ) ( "r" | "R" ) ( "y" | "Y" ) >
    |
    < LET: ( "l" | "L" ) ( "e" | "E" ) ( "t" | "T" ) >
    |
    < CACHE: ( "c" | "C" ) ( "a" | "A" ) ( "c" | "C" ) ( "h" | "H" ) ( "e" | "E" ) >
    |
    < NOCACHE: ( "n" | "N" ) ( "o" | "O" ) ( "c" | "C" ) ( "a" | "A" ) ( "c" | "C" ) ( "h" | "H" ) ( "e" | "E" ) >
    |
    < UNSAFE: ( "u" | "U" ) ( "n" | "N" ) ( "s" | "S" ) ( "a" | "A" ) ( "f" | "F" ) ( "e" | "E" ) >
    |
    < PARALLEL: ( "p" | "P" ) ( "a" | "A" ) ( "r" | "R" ) ( "a" | "A" ) ( "l" | "L" ) ( "l" | "L" ) ( "e" | "E" ) ( "l" | "L" ) >
    |
    < STRATEGY: ( "s" | "S" ) ( "t" | "T" ) ( "r" | "R" ) ( "a" | "A" ) ( "t" | "T" ) ( "e" | "E" ) ( "g" | "G" ) ( "y" | "Y" )  >
    |
    < DEPTH_FIRST: ( "d" | "D" ) ( "e" | "E" ) ( "p" | "P" ) ( "t" | "T" ) ( "h" | "H" ) ( "_" )  ( "f" | "F" ) ( "i" | "I" ) ( "r" | "R" ) ( "s" | "S" ) ( "t" | "T" )  >
    |
    < BREADTH_FIRST: ( "b" | "B" ) ( "r" | "R" ) ( "e" | "E" ) ( "a" | "A" ) ( "d" | "D" ) ( "t" | "T" )  ( "h" | "H" ) ( "_" ) ( "f" | "F" ) ( "i" | "I" ) ( "r" | "R" ) ( "s" | "S" ) ( "t" | "T" )  >
	|
	< LUCENE: ( "l" | "L" ) ( "u" | "U" ) ( "c" | "C" ) ( "e" | "E" ) ( "n" | "N" ) ( "e" | "E" ) >
	|
	< NEAR: ( "n" | "N" ) ( "e" | "E" ) ( "a" | "A" ) ( "r" | "R" ) >
	|
	< WITHIN: ( "w" | "W" ) ( "i" | "I" ) ( "t" | "T" ) ( "h" | "H" ) ( "i" | "I" ) ( "n" | "N" ) >
	|
	< UNWIND: ( "u" | "U" ) ( "n" | "N" ) ( "w" | "W" ) ( "i" | "I" ) ( "n" | "N" ) ( "d" | "D" ) >
	|
	< MAXDEPTH: ( "m" | "M" ) ( "a" | "A" ) ( "x" | "X" ) ( "d" | "D" ) ( "e" | "E" ) ( "p" | "P" ) ( "t" | "T" ) ( "h" | "H" ) >
	|
	< MINDEPTH: ( "m" | "M" ) ( "i" | "I" ) ( "n" | "N" ) ( "d" | "D" ) ( "e" | "E" ) ( "p" | "P" ) ( "t" | "T" ) ( "h" | "H" ) >
	|
	< CLASS: ( "c" | "C" ) ( "l" | "L" ) ( "a" | "A" ) ( "s" | "S" ) ( "s" | "S" ) >
	|
	< SUPERCLASS: ( "s" | "S" ) ( "u" | "U" ) ( "p" | "P" ) ( "e" | "E" ) ( "r" | "R" ) ( "c" | "C" ) ( "l" | "L" ) ( "a" | "A" ) ( "s" | "S" ) ( "s" | "S" ) >
	|
	< CLASSES: ( "c" | "C" ) ( "l" | "L" ) ( "a" | "A" ) ( "s" | "S" ) ( "s" | "S" ) ( "e" | "E" ) ( "s" | "S" ) >
	|
	< SUPERCLASSES: ( "s" | "S" ) ( "u" | "U" ) ( "p" | "P" ) ( "e" | "E" ) ( "r" | "R" ) ( "c" | "C" ) ( "l" | "L" ) ( "a" | "A" ) ( "s" | "S" ) ( "s" | "S" ) ( "e" | "E" ) ( "s" | "S" )>
    |
	< EXCEPTION: ( "e" | "E" ) ( "x" | "X" ) ( "c" | "C" ) ( "e" | "E" ) ( "p" | "P" ) ( "t" | "T" ) ( "i" | "I" ) ( "o" | "O" ) ( "n" | "N" ) >
	|
	< PROFILE: ( "p" | "P" ) ( "r" | "R" ) ( "o" | "O" ) ( "f" | "F" ) ( "i" | "I" ) ( "l" | "L" ) ( "e" | "E" ) >
	|
	< STORAGE: ( "s" | "S" ) ( "t" | "T" ) ( "o" | "O" ) ( "r" | "R" ) ( "a" | "A" ) ( "g" | "G" ) ( "e" | "E" ) >
	|
	< ON: ( "o" | "O" ) ( "n" | "N" ) >
	|
	< OFF: ( "o" | "O" ) ( "f" | "F" ) ( "f" | "F" ) >
	|
	< TRUNCATE: ( "t" | "T" ) ( "r" | "R" ) ( "u" | "U" ) ( "n" | "N" ) ( "c" | "C" ) ( "a" | "A" ) ( "t" | "T" ) ( "e" | "E" ) >
	|
	< POLYMORPHIC: ( "p" | "P" ) ( "o" | "O" ) ( "l" | "L" ) ( "y" | "Y" ) ( "m" | "M" ) ( "o" | "O" ) ( "r" | "R" ) ( "p" | "P" ) ( "h" | "H" ) ( "i" | "I" ) ( "c" | "C" ) >
	|
	< FIND: ( "f" | "F" ) ( "i" | "I" ) ( "n" | "N" ) ( "d" | "D" ) >
	|
	< REFERENCES: ( "r" | "R" ) ( "e" | "E" ) ( "f" | "F" ) ( "e" | "E" ) ( "r" | "R" ) ( "e" | "E" ) ( "n" | "N" ) ( "c" | "C" ) ( "e" | "E" ) ( "s" | "S" ) >
	|
	< EXTENDS: ( "e" | "E" ) ( "x" | "X" ) ( "t" | "T" ) ( "e" | "E" ) ( "n" | "N" ) ( "d" | "D" ) ( "s" | "S" ) >
	|
	< CLUSTERS: ( "C" | "c" ) ( "L" | "l" ) ( "U" | "u" ) ( "S" | "s" ) ( "T" | "t" ) ( "E" | "e" ) ( "R" | "r" ) ( "S" | "s" ) >
	|
	< ABSTRACT: ( "a" | "A" ) ( "b" | "B" ) ( "s" | "S" ) ( "T" | "t" ) ( "R" | "r" ) ( "a" | "A" ) ( "C" | "c" ) ( "T" | "t" ) >
	|
	< ALTER: ( "a" | "A" ) ( "l" | "L" ) ( "t" | "T" ) ( "e" | "E" ) ( "r" | "R" ) >
	|
	< NAME: ("n" | "N") ( "a" | "A" ) ( "m" | "M" ) ( "e" | "E" ) >
	|
	< SHORTNAME: ( "s" | "S" ) ( "h" | "H" ) ( "o" | "O" ) ( "r" | "R" ) ( "t" | "T" ) ("n" | "N") ( "a" | "A" ) ( "m" | "M" ) ( "e" | "E" ) >
	|
	< OVERSIZE:  ( "o" | "O" ) ( "v" | "V" ) ( "e" | "E" ) ( "r" | "R" ) ( "s" | "S" ) ( "i" | "I" ) ("z" | "Z") ( "e" | "E" ) >
	|
	< STRICTMODE: ( "s" | "S" ) ( "t" | "T" ) ( "r" | "R" ) ( "i" | "I" ) ( "C" | "c" ) ( "T" | "t" ) ( "m" | "M" ) ( "o" | "O" ) ( "d" | "D" ) ( "e" | "E" ) >
	|
	< ADDCLUSTER: ( "a" | "A" ) ( "d" | "D" ) ( "d" | "D" ) ( "C" | "c" ) ( "L" | "l" ) ( "U" | "u" ) ( "S" | "s" ) ( "T" | "t" ) ( "E" | "e" ) ( "R" | "r" ) >
	|
	< REMOVECLUSTER: ( "r" | "R" ) ( "e" | "E" ) ( "m" | "M" ) ( "o" | "O" ) ( "v" | "V" ) ( "e" | "E" ) ( "C" | "c" ) ( "L" | "l" ) ( "U" | "u" ) ( "S" | "s" ) ( "T" | "t" ) ( "E" | "e" ) ( "R" | "r" ) >
	|
	< CUSTOM: ( "c" | "C" ) ( "u" | "U" ) ( "s" | "S" ) ( "t" | "T" ) ( "o" | "O" ) ( "m" | "M" ) >
	|
	< CLUSTERSELECTION: ( "C" | "c" ) ( "L" | "l" ) ( "U" | "u" ) ( "S" | "s" ) ( "T" | "t" ) ( "E" | "e" ) ( "R" | "r" ) ( "s" | "S" ) ( "e" | "E" ) ( "l" | "L" ) ( "e" | "E" ) ( "c" | "C" ) ( "t" | "T" ) ( "i" | "I" ) ( "o" | "O" ) ( "n" | "N" ) >
	|
	< DESCRIPTION: ( "d" | "D" ) ( "E" | "e" )  ( "s" | "S" ) ( "c" | "C" ) ( "r" | "R" ) ( "i" | "I" ) ( "p" | "P" ) ( "t" | "T" ) ( "i" | "I" ) ( "o" | "O" ) ( "n" | "N" ) >
	|
	< ENCRYPTION: ( "E" | "e" ) ( "n" | "N" ) ( "c" | "C" ) ( "r" | "R" ) ( "y" | "Y" ) ( "p" | "P" ) ( "t" | "T" ) ( "i" | "I" ) ( "o" | "O" ) ( "n" | "N" ) >
	|
	< DROP: ( "d" | "D" ) ( "r" | "R" ) ( "o" | "O" ) ( "p" | "P" ) >
	|
	< PROPERTY: ( "p" | "P" ) ( "r" | "R" ) ( "o" | "O" ) ( "p" | "P" ) ( "e" | "E" ) ( "r" | "R" ) ( "t" | "T" ) ( "y" | "Y" ) >
	|
	< FORCE: ( "f" | "F" ) ( "o" | "O" ) ( "r" | "R" ) ( "c" | "C" ) ( "e" | "E" ) >
	|
	< METADATA: ( "m" | "M" ) ( "e" | "E" ) ( "t" | "T" ) ( "a" | "A" ) ( "d" | "D" ) ( "a" | "A" ) ( "t" | "T" ) ( "a" | "A" )   >
	|
    < INDEX: ( "I" | "i") ( "N" | "n") ( "D" | "d") ( "E" | "e") ( "X" | "x")  >
    |
    < COLLATE: ( "c" | "C") ( "o" | "O") ( "l" | "L") ( "l" | "L") ( "a" | "A") ( "t" | "T") ( "E" | "e")  >
    |
    < ENGINE: ( "E" | "e")  ( "N" | "n") ( "G" | "g") ( "I" | "i") ( "N" | "n")( "E" | "e") >
    |
    < REBUILD: ( "R" | "r") ( "E" | "e")  ( "B" | "b") ( "U" | "u") ( "I" | "i") ( "L" | "l") ( "D" | "d") >
    |
    < ID: ( "I" | "i") ( "D" | "d") >
    |
    < DATABASE: ( "D" | "d") ( "A" | "a")  ( "T" | "t") ( "A" | "a") ( "B" | "b") ( "A" | "a") ( "S" | "s") ( "E" | "e") >
    |
    < OPTIMIZE: ( "O" | "o") ( "P" | "p")  ( "T" | "t") ( "I" | "i") ( "M" | "m") ( "I" | "i") ( "Z" | "z") ( "E" | "e") >
    |
    < LINK: ( "L" | "l") ( "I" | "i")  ( "N" | "n") ( "K" | "k") >
    |
    < TYPE: ( "T" | "t") ( "Y" | "y")  ( "P" | "p") ( "E" | "e") >
    |
    < INVERSE: ( "I" | "i") ( "N" | "n")  ( "V" | "v") ( "E" | "e") ( "R" | "r")  ( "S" | "s") ( "E" | "e") >
    |
    < EXPLAIN: ( "E" | "e") ( "X" | "x")  ( "P" | "p") ( "L" | "l") ( "A" | "a")  ( "I" | "i") ( "N" | "n") >
    |
    < GRANT: ( "G" | "g") ( "R" | "r")  ( "A" | "a") ( "N" | "n") ( "T" | "t") >
    |
    < REVOKE: ( "R" | "r") ( "E" | "e")  ( "V" | "v") ( "O" | "o") ( "K" | "k")  ( "E" | "e") >
    |
    < READ: ( "R" | "r") ( "E" | "e")  ( "A" | "a") ( "D" | "d")>
    |
    < EXECUTE: ( "E" | "e") ( "X" | "x") ( "E" | "e") ( "C" | "c")  ( "U" | "u")  ( "T" | "t") ( "E" | "e")>
    |
    < ALL: ( "A" | "a") ( "L" | "l") ( "L" | "l")>
    |
    < NONE: ( "N" | "n") ( "O" | "o")  ( "N" | "n") ( "E" | "e")>
    |
    < FUNCTION: ( "F" | "f") ( "U" | "u")  ( "N" | "n") ( "C" | "c") ( "T" | "t")  ( "I" | "i") ( "O" | "o")  ( "N" | "n") >
    |
    < PARAMETERS: ( "P" | "p") ( "A" | "a")  ( "R" | "r") ( "A" | "a") ( "M" | "m")  ( "E" | "e") ( "T" | "t")  ( "E" | "e") ( "R" | "r") ( "S" | "s") >
    |
    < IDEMPOTENT: ( "I" | "i") ( "D" | "d")  ( "E" | "e") ( "M" | "m") ( "P" | "p")  ( "O" | "o") ( "T" | "t")  ( "E" | "e") ( "N" | "n") ( "T" | "t") >
    |
    < LANGUAGE: ( "L" | "l") ( "A" | "a")  ( "N" | "n") ( "G" | "g") ( "U" | "u")  ( "A" | "a") ( "G" | "g")  ( "E" | "e") >
    |
    < BEGIN: ( "B" | "b") ( "E" | "e")  ( "G" | "g") ( "I" | "i") ( "N" | "n") >
    |
    < COMMIT: ( "C" | "c") ( "O" | "o")  ( "M" | "m") ( "M" | "m") ( "I" | "i")  ( "T" | "t") >
    |
    < IF: ( "I" | "i") ( "F" | "f") >
    |
    < ISOLATION: ( "I" | "i") ( "S" | "s") ( "O" | "o") ( "L" | "l") ( "A" | "a") ( "T" | "t") ( "I" | "i") ( "O" | "o") ( "N" | "n") >
    |
    < SLEEP: ( "S" | "s") ( "L" | "l") ( "E" | "e") ( "E" | "e") ( "P" | "p")  >
    |
    < CONSOLE: ( "C" | "c") ( "O" | "o") ( "N" | "n") ( "S" | "s") ( "O" | "o")  ( "L" | "l") ( "E" | "e")>
    |
    < BLOB: ( "B" | "b") ( "L" | "l") ( "O" | "o") ( "B" | "b") >
    |
    < SHARED: ( "S" | "s") ( "H" | "h") ( "A" | "a") ( "R" | "r") ( "E" | "e") ( "D" | "d") >
    |
    < DEFAULT_: ( "D" | "d") ( "E" | "e") ( "F" | "f") ( "A" | "a") ( "U" | "u") ( "L" | "l") ( "T" | "t") >
	|
	< SEQUENCE: ( "S" | "s") ( "E" | "e") ( "Q" | "q") ( "U" | "u") ( "E" | "e") ( "N" | "n") ( "C" | "c") ( "E" | "e") >
	|
	< START: ( "S" | "s") ( "T" | "t") ( "A" | "a") ( "R" | "r") ( "T" | "t") >
	|
	< THIS: "@" ( ( "t" | "T" ) ( "h" | "H" ) ( "i" | "I" ) ( "s" | "S" ) ) >
	|
	< RECORD_ATTRIBUTE: <RID_ATTR> | <CLASS_ATTR> | <VERSION_ATTR> | <SIZE_ATTR> | <TYPE_ATTR> | <RAW_ATTR> | <RID_ID_ATTR> | <RID_POS_ATTR> | <FIELDS_ATTR> >
	|
	< #RID_ATTR: "@" ( ( "r" | "R" ) ( "i" | "I" ) ( "d" | "D" ) ) >
	|
	< #CLASS_ATTR: "@" ( ( "c" | "C" ) ( "l" | "L" ) ( "a" | "A" ) ( "s" | "S" ) ( "s" | "S" ))>
	|
	< #VERSION_ATTR: "@" ( ( "v" | "V" ) ( "e" | "E" ) ( "r" | "R" ) ( "s" | "S" ) ( "i" | "I" ) ( "o" | "O" ) ( "n" | "N" )) >
	|
	< #SIZE_ATTR: "@" ( ( "s" | "S" ) ( "i" | "I" ) ( "z" | "Z" ) ( "e" | "E" ) ) >
	|
	< #TYPE_ATTR: "@" ( ( "t" | "T" ) ( "y" | "Y" ) ( "p" | "P" ) ( "e" | "E" ) ) >
    |
	< #RAW_ATTR: "@" ( ( "r" | "R" ) ( "a" | "A" ) ( "w" | "W" ) ) >
	|
	< #RID_ID_ATTR: "@" ( ( "r" | "R" ) ( "i" | "I" ) ( "d" | "D" ) "_" ( "i" | "I" ) ( "d" | "D" )) >
	|
	< #RID_POS_ATTR: "@" ( ( "r" | "R" ) ( "i" | "I" ) ( "d" | "D" ) "_" ( "p" | "P" ) ( "o" | "O" )  ( "s" | "S" )) >
    |
    < #FIELDS_ATTR: "@" ( ( "f" | "F" ) ( "i" | "I" ) ( "e" | "E" ) ( "l" | "L" ) ( "d" | "D" ) ( "s" | "S" )) >

}


/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        <DECIMAL_FLOATING_POINT_LITERAL>
      | <HEXADECIMAL_FLOATING_POINT_LITERAL>
  >
|
  < #DECIMAL_FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <DECIMAL_EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<DECIMAL_EXPONENT>)? ["f","F","d","D"]
  >
|
  < #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < #HEXADECIMAL_FLOATING_POINT_LITERAL:
        "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])+ (".")? <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
      | "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])* "." (["0"-"9","a"-"f","A"-"F"])+ <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
  >
|
  < #HEXADECIMAL_EXPONENT: ["p","P"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\"","/"]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      (
	      "\""
	      (   (~["\"","\\","\n","\r"])
	        | ("\\"
	            ( ["n","t","b","r","f","\\","'","\"","/"]
	            | ["0"-"7"] ( ["0"-"7"] )?
	            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
	            )
	          )
	      )*
	      "\""
      )
      |
      (
	      "'"
	      (   (~["\'","\\","\n","\r"])
	        | ("\\"
	            ( ["n","t","b","r","f","\\","'","\"","/"]
	            | ["0"-"7"] ( ["0"-"7"] )?
	            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
	            )
	          )
	      )*
	      "'"
      )
  >
  |
  < INTEGER_RANGE:
    (<MINUS>)? <INTEGER_LITERAL> <RANGE> (<MINUS>)?<INTEGER_LITERAL>
  >
  |
  < TRUE: "true" >
  |
  < FALSE: "false" >
}



/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
| < DOLLAR: "$" >
| < BACKTICK: "`" >
}

/* OPERATORS */

TOKEN :
{

  < EQ: "=" >
| < EQEQ: "==" >
| < LT: "<" >
| < GT: ">" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < NEQ: "<>" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < ELLIPSIS: "..." >
| < RANGE: ".." >
| < NOT: ( "N" | "n") ( "O" | "o") ( "T" | "t")  >
| < IN: ( "I" | "i") ( "N" | "n") >
| < LIKE: ( "L" | "l") ( "I" | "i") ( "K" | "k") ( "E" | "e") >
| < IS: "is" | "IS" | "Is" | "iS" >
| < BETWEEN: ( "B" | "b") ( "E" | "e") ( "T" | "t") ( "W" | "w") ( "E" | "e") ( "E" | "e") ( "N" | "n")>
| < CONTAINS: ( "C" | "c" ) ( "O" | "o" ) ( "N" | "n" ) ( "T" | "t" ) ( "A" | "a" ) ( "I" | "i" ) ( "N" | "n" ) ( "S" | "s" ) >
| < CONTAINSALL: ( "C" | "c" ) ( "O" | "o" ) ( "N" | "n" ) ( "T" | "t" ) ( "A" | "a" ) ( "I" | "i" ) ( "N" | "n" ) ( "S" | "s" ) ( "A" | "a" ) ( "L" | "l" ) ( "L" | "l" ) >
| < CONTAINSKEY: ( "C" | "c" ) ( "O" | "o" ) ( "N" | "n" ) ( "T" | "t" ) ( "A" | "a" ) ( "I" | "i" ) ( "N" | "n" ) ( "S" | "s" ) ( "K" | "k" ) ( "E" | "e" ) ( "Y" | "y" ) >
| < CONTAINSVALUE: ( "C" | "c" ) ( "O" | "o" ) ( "N" | "n" ) ( "T" | "t" ) ( "A" | "a" ) ( "I" | "i" ) ( "N" | "n" ) ( "S" | "s" ) ( "V" | "v" ) ( "A" | "a" ) ( "L" | "l" ) ( "U" | "u" ) ( "E" | "e" ) >
| < CONTAINSTEXT: ( "C" | "c" ) ( "O" | "o" ) ( "N" | "n" ) ( "T" | "t" ) ( "A" | "a" ) ( "I" | "i" ) ( "N" | "n" ) ( "S" | "s" ) ( "T" | "t" ) ( "E" | "e" ) ( "X" | "x" ) ( "T" | "t" ) >
| < MATCHES: ( "M" | "m") ( "A" | "a") ( "T" | "t") ( "C" | "c") ( "H" | "h") ( "E" | "e") ( "S" | "s") >
| < KEY: ( "K" | "k") ( "E" | "e") ( "Y" | "y") >
| < INSTANCEOF: ( "I" | "i" ) ( "N" | "n" ) ( "S" | "s" ) ( "T" | "t" ) ( "A" | "a" ) ( "N" | "n" ) ( "C" | "c" ) ( "E" | "e" ) ( "O" | "o" ) ( "F" | "f" ) >
| < CLUSTER: ( "C" | "c" ) ( "L" | "l" ) ( "U" | "u" ) ( "S" | "s" ) ( "T" | "t" ) ( "E" | "e" ) ( "R" | "r" ) >
}



TOKEN :
{
  < IDENTIFIER: ( ((<DOLLAR>) | <LETTER>) (<PART_LETTER>)* ) >
|
  < QUOTED_IDENTIFIER: ( "`" (~["`"] | "\\`") (~["`"] | "\\`")*  "`") >
|
  < INDEX_COLON: <INDEX> ":" >
|
  < INDEXVALUES_IDENTIFIER: ( "I" | "i") ( "N" | "n") ( "D" | "d") ( "E" | "e") ( "X" | "x") ( "V" | "v") ( "A" | "a") ( "L" | "l") ( "U" | "u") ( "E" | "e") ( "S" | "s") ":" ( "__@recordmap@___" )? <IDENTIFIER> ( ( <DOT> | <MINUS> ) <IDENTIFIER> )* >
|
  < INDEXVALUESASC_IDENTIFIER:( "I" | "i") ( "N" | "n") ( "D" | "d") ( "E" | "e") ( "X" | "x") ( "V" | "v") ( "A" | "a") ( "L" | "l") ( "U" | "u") ( "E" | "e") ( "S" | "s") ( "A" | "a") ( "S" | "s") ( "C" | "c") ":" ( "__@recordmap@___" )? <IDENTIFIER> ( ( <DOT> | <MINUS> ) <IDENTIFIER> )* >
|
  < INDEXVALUESDESC_IDENTIFIER: ( "I" | "i") ( "N" | "n") ( "D" | "d") ( "E" | "e") ( "X" | "x") ( "V" | "v") ( "A" | "a") ( "L" | "l") ( "U" | "u") ( "E" | "e") ( "S" | "s") ( "D" | "d") ( "E" | "e") ( "S" | "s") ( "C" | "c") ":" ( "__@recordmap@___" )? <IDENTIFIER> ( ( <DOT> | <MINUS> ) <IDENTIFIER> )* >
|
  < CLUSTER_IDENTIFIER: <CLUSTER> <COLON> <IDENTIFIER>  >
|
  < CLUSTER_NUMBER_IDENTIFIER: <CLUSTER> <COLON> <INTEGER_LITERAL>  >
|
  < METADATA_IDENTIFIER: "metadata:" <IDENTIFIER>  >
|
  < #LETTER:
      [  "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
|
  < #PART_LETTER:
      [  "0"-"9",
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
}

ORid Rid():
{}
{
    (
	     LOOKAHEAD(4)
	    "#" jjtThis.cluster = Integer() <COLON> jjtThis.position = Integer()
    	 |
    	 LOOKAHEAD(3)
    	 jjtThis.cluster = Integer() <COLON> jjtThis.position = Integer()
    )
    { return jjtThis; }
}

/** Root productions. */
OStatement parse() :
{OStatement result;}
{
  result = Statement() <EOF>
  { return result; }
}

List<OStatement> parseScript() :
{
  List<OStatement> result = new ArrayList<OStatement>();
  OStatement last;
}
{
    (
        LOOKAHEAD(StatementSemicolon())
        last = StatementSemicolon() {result.add(last);}
        |
        last = IfStatement() {result.add(last);}
        |
        <SEMICOLON>
    )*

  <EOF>
  { return result; }
}

OIdentifier Identifier():
{
    Token quotedToken = null;
    Token token = null;

}
{
(
    token = <IDENTIFIER>
    |
    token = <IN>
    |
    token = <SET>
    |
    token = <PUT>
    |
    token = <ADD>
    |
    token = <REMOVE>
    |
    token = <MERGE>
    |
    token = <CONTENT>
    |
    token = <ORDER>
    |
    token = <KEY>
    |
    token = <OFFSET>
    |
    token = <GROUP>
    |
    token = <VALUE>
    |
    token = <VALUES>
    |
    token = <RECORD>
    |
    token = <TO>
    |
    token = <LUCENE>
    |
    token = <CLASS>
    |
    token = <CLASSES>
    |
    token = <MINDEPTH>
    |
    token = <NEAR>
    |
    token = <WITHIN>
    |
    token = <EXCEPTION>
    |
    token = <PROFILE>
    |
    token = <STORAGE>
    |
    token = <ON>
    |
    token = <OFF>
    |
    token = <TRUNCATE>
    |
    token = <FIND>
	|
	token = <REFERENCES>
	|
	token = <EXTENDS>
	|
	token = <CLUSTERS>
	|
	token = <ABSTRACT>
	|
	token = <ALTER>
	|
	token = <NAME>
	|
	token = <SHORTNAME>
	|
	token = <SUPERCLASS>
	|
	token = <SUPERCLASSES>
	|
	token = <OVERSIZE>
	|
	token = <STRICTMODE>
	|
	token = <ADDCLUSTER>
	|
	token = <REMOVECLUSTER>
	|
	token = <CUSTOM>
	|
	token = <CLUSTERSELECTION>
	|
	token = <DESCRIPTION>
	|
	token = <ENCRYPTION>
	|
	token = <DROP>
	|
	token = <PROPERTY>
	|
	token = <FORCE>
	|
	token = <METADATA>
	|
	token = <COLLATE>
	|
	token = <INDEX>
	|
	token = <ENGINE>
	|
	token = <REBUILD>
	|
	token = <ID>
	|
	token = <DATABASE>
	|
	token = <OPTIMIZE>
	|
	token = <LINK>
	|
	token = <TYPE>
    |
    token = <INVERSE>
    |
    token = <EXPLAIN>
    |
    token = <GRANT>
    |
    token = <REVOKE>
    |
    token = <READ>
    |
    token = <EXECUTE>
    |
    token = <ALL>
    |
    token = <NONE>
    |
    token = <FUNCTION>
    |
    token = <PARAMETERS>
    |
    token = <IDEMPOTENT>
    |
    token = <LANGUAGE>
    |
    token = <BEGIN>
    |
    token = <COMMIT>
    |
    token = <IF>
    |
    token = <ISOLATION>
    |
    token = <SLEEP>
    |
    token = <CONSOLE>
    |
    token = <BLOB>
    |
    token = <SHARED>
    |
    token = <DEFAULT_>
    |
    token = <SEQUENCE>
    |
    token = <CACHE>
    |
    token = <START>
    |
    quotedToken = <QUOTED_IDENTIFIER>
) {

    if(token!=null){
        jjtThis.value = token.image;
    }else{
        jjtThis.quoted = true;
        jjtThis.value = quotedToken.image;
        jjtThis.value = jjtThis.value.substring(1, jjtThis.value.length() - 1);
        /*try{
            jjtThis.value = java.net.URLEncoder.encode(jjtThis.value, null);
        }catch(Exception e){

        }*/
    }

    return jjtThis;


    }
}

OInteger Integer():
{
    int sign = 1;
    Token tokenVal;
}
{
(
    [ <MINUS> {sign = -1;} ] tokenVal = <INTEGER_LITERAL> {jjtThis.value = sign * Long.parseLong(tokenVal.image);}
) { return jjtThis; }
}



OFloatingPoint FloatingPoint():
{
    String stringValue;
    Token tokenVal;
}
{
    (
        [ <MINUS> { jjtThis.sign = -1; } ] tokenVal = <FLOATING_POINT_LITERAL> { jjtThis.stringValue = tokenVal.image; }
    )
    { return jjtThis; }
}

ONumber Number():
{ ONumber result; }
{
    (
        LOOKAHEAD( Integer() )
        result = Integer()
        |
        LOOKAHEAD( FloatingPoint() )
        result = FloatingPoint()
    )
    { return result; }
}

OStatement Statement():
{OStatement result = null;}
{
    result = StatementInternal()
    [ <SEMICOLON> ]
    {return result;}
}

OStatement StatementSemicolon():
{OStatement result = null;}
{
    result = StatementInternal()
    <SEMICOLON>
    {return result;}
}

OStatement StatementInternal():
{
    OStatement result = null;
}
{
    (
        (
            (
                result = QueryStatement()
                |
                LOOKAHEAD(2)
                result = DeleteStatement()
                |
                LOOKAHEAD(2)
                result = DeleteVertexStatement()
                |
                LOOKAHEAD(2)
                result = DeleteEdgeStatement()
                |
                result = InsertStatement()
                |
                LOOKAHEAD(2)
                result = CreateClassStatement()
                |
                LOOKAHEAD(2)
                result = CreatePropertyStatement()
                |
                LOOKAHEAD(2)
                result = CreateIndexStatement()
                |
                LOOKAHEAD(2)
                result = CreateClusterStatement()
                |
                LOOKAHEAD(2)
                result = CreateLinkStatement()
                |
                LOOKAHEAD(2)
                result = CreateFunctionStatement()
                |
                LOOKAHEAD(2)
                result = CreateSequenceStatement()
                |
                LOOKAHEAD(CreateVertexStatementNoTarget())
                result = CreateVertexStatementNoTarget()
                |
                LOOKAHEAD(CreateVertexStatement())
                result = CreateVertexStatement()
                |
                LOOKAHEAD(CreateVertexStatementEmpty())
                result = CreateVertexStatementEmpty()
                |
                LOOKAHEAD(CreateVertexStatementEmptyNoTarget())
                result = CreateVertexStatementEmptyNoTarget()
                |
                LOOKAHEAD(CreateEdgeStatement())
                result = CreateEdgeStatement()
                |
                LOOKAHEAD(UpdateEdgeStatement())
                result = UpdateEdgeStatement()
                |
                LOOKAHEAD(UpdateStatement())
                result = UpdateStatement()
                |
                result = ProfileStorageStatement()
                |
                LOOKAHEAD(TruncateClassStatement())
                result = TruncateClassStatement()
                |
                LOOKAHEAD(TruncateClusterStatement())
                result = TruncateClusterStatement()
                |
                LOOKAHEAD(TruncateRecordStatement())
                result = TruncateRecordStatement()
                |
                LOOKAHEAD(2)
                result = AlterSequenceStatement()
                |
                LOOKAHEAD(AlterClassStatement())
                result = AlterClassStatement()
                |
                LOOKAHEAD(2)
                result = DropSequenceStatement()
                |
                LOOKAHEAD(DropClassStatement())
                result = DropClassStatement()
                |
                LOOKAHEAD(AlterPropertyStatement())
                result = AlterPropertyStatement()
                |
                LOOKAHEAD(DropPropertyStatement())
                result = DropPropertyStatement()
                |
                result = RebuildIndexStatement()
                |
                LOOKAHEAD(2)
                result = DropIndexStatement()
                |
                LOOKAHEAD(AlterClusterStatement())
                result = AlterClusterStatement()
                |
                LOOKAHEAD(2)
                result = DropClusterStatement()
                |
                LOOKAHEAD(2)
                result = AlterDatabaseStatement()
                |
                result = OptimizeDatabaseStatement()
                |
                result = GrantStatement()
                |
                result = RevokeStatement()
                |
                result = BeginStatement()
                |
                result = CommitStatement()
                |
                result = ReturnStatement()
                |
                result = SleepStatement()
                |
                result = ConsoleStatement()
                |
                result = IfStatement()
            )
        )
        |
        result = ExplainStatement()
        |
        result = LetStatement()

    )
	{
	    return result;
	}
}

OStatement QueryStatement():
{
 OStatement result;
}
{
    (
        LOOKAHEAD( SelectStatement() )
        result = SelectStatement()
        |
        result = SelectWithoutTargetStatement()
        |
        result = TraverseStatement()
        |
        result = MatchStatement()
        |
        LOOKAHEAD( FindReferencesStatement() )
        result = FindReferencesStatement()
    ){ return result; }
}

OSelectWithoutTargetStatement SelectWithoutTargetStatement():
{validationStats.add(0, new ValidationStats());}
{
    (
    	<SELECT>
        jjtThis.projection = Projection()
    	[ jjtThis.letClause = LetClause() ]
    	[ jjtThis.unwind = Unwind() ]
    	(
			[
				jjtThis.skip = Skip() [ jjtThis.limit = Limit() ]
				|
				jjtThis.limit = Limit() [ jjtThis.skip = Skip() ]
			]
		)
    	[ jjtThis.fetchPlan = FetchPlan() ]
    	[ jjtThis.timeout = Timeout() ]
        [ <LOCK>
            (
                <RECORD> {jjtThis.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.EXCLUSIVE_LOCK;}
                |
                <NONE> {jjtThis.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.NONE;}
                |
                <SHARED> {jjtThis.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.SHARED_LOCK;}
                |
                <DEFAULT_> {jjtThis.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.DEFAULT;}
            )
        ]
        [ <PARALLEL> { jjtThis.parallel = true; } ]
        [ <NOCACHE> { jjtThis.noCache = true; } ]
    )
    {
        jjtThis.validate(validationStats.remove(0));
        return jjtThis;
    }
}

OSelectStatement SelectStatement():
{validationStats.add(0, new ValidationStats());}
{
    (
   	    <SELECT>
        [ jjtThis.projection = Projection() ]
        <FROM>
        jjtThis.target = FromClause()
        [ jjtThis.letClause = LetClause() ]
        [ <WHERE> jjtThis.whereClause = WhereClause() ]
        [ jjtThis.groupBy = GroupBy() ]
        [ jjtThis.orderBy = OrderBy() ]
        [ jjtThis.unwind = Unwind() ]
        (
            [
                jjtThis.skip = Skip() [ jjtThis.limit = Limit() ]
                |
                jjtThis.limit = Limit() [ jjtThis.skip = Skip() ]
            ]
        )
        [ jjtThis.fetchPlan = FetchPlan() ]
        [ jjtThis.timeout = Timeout() ]
        [ <LOCK>
            (
                <RECORD> {jjtThis.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.EXCLUSIVE_LOCK;}
                |
                <NONE> {jjtThis.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.NONE;}
                |
                <SHARED> {jjtThis.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.SHARED_LOCK;}
                |
                <DEFAULT_> {jjtThis.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.DEFAULT;}
            )
        ]
        [ <PARALLEL> { jjtThis.parallel = true; } ]
        [ <NOCACHE> { jjtThis.noCache = true; } ]
    )
    {
        jjtThis.validate(validationStats.remove(0));
        return jjtThis;
    }
}

OTraverseStatement TraverseStatement():
{ OTraverseProjectionItem lastProjection;}
{
    (
    	<TRAVERSE>
    	[
    	    lastProjection = TraverseProjectionItem() { jjtThis.projections.add(lastProjection); }
    	    ( <COMMA> lastProjection = TraverseProjectionItem()  { jjtThis.projections.add(lastProjection); } )*
    	]
    	<FROM>
    	jjtThis.target = FromClause()
    	[ <MAXDEPTH> jjtThis.maxDepth = Integer() ]
    	[ <WHILE> jjtThis.whereClause = WhereClause() ]
        [ jjtThis.limit = Limit() ]
        [ <STRATEGY>
            (
                <DEPTH_FIRST> { jjtThis.strategy = OTraverseStatement.Strategy.DEPTH_FIRST; }
                |
                <BREADTH_FIRST> { jjtThis.strategy = OTraverseStatement.Strategy.BREADTH_FIRST; }
            )
        ]
    )
    {return jjtThis;}
}

OMatchStatement MatchStatement():
{
    OMatchExpression lastMatchExpr = null;
    OExpression lastReturn = null;
    OIdentifier lastReturnAlias = null;
}
{
    (
        <MATCH>
        lastMatchExpr = MatchExpression() { jjtThis.matchExpressions.add(lastMatchExpr); }
        (
            <COMMA>
            lastMatchExpr = MatchExpression() { jjtThis.matchExpressions.add(lastMatchExpr); }
        )*
        <RETURN>
        lastReturn = Expression() {lastReturnAlias = null;}
        [ <AS> lastReturnAlias = Identifier() ]
        {
            jjtThis.returnAliases.add(lastReturnAlias);
            jjtThis.returnItems.add(lastReturn);
        }
        (
            <COMMA>
            lastReturn = Expression() {lastReturnAlias = null;}
            [ <AS> lastReturnAlias = Identifier() ]
            {
                jjtThis.returnAliases.add(lastReturnAlias);
                jjtThis.returnItems.add(lastReturn);
            }
        )*
        [ jjtThis.limit = Limit() ]
    ){ return jjtThis; }
}

ODeleteStatement DeleteStatement():
{}
{
(
	<DELETE>
	<FROM>
	jjtThis.fromClause = FromClause()
	[ <RETURN> <BEFORE> { jjtThis.returnBefore = true; } ]
	[ <WHERE> jjtThis.whereClause = WhereClause() ]
	[ jjtThis.limit = Limit() ]
	[ <UNSAFE> { jjtThis.unsafe = true; }]
) {return jjtThis;}
}

ODeleteVertexStatement DeleteVertexStatement():
{}
{
(
	<DELETE>
	<VERTEX>
	[ <FROM> {jjtThis.from = true;} ]
	jjtThis.fromClause = FromClause()
	[ <RETURN> <BEFORE> { jjtThis.returnBefore = true; } ]
	[ <WHERE> jjtThis.whereClause = WhereClause() ]
    [ jjtThis.limit = Limit() ]
    [ jjtThis.batch = Batch() ]
) {return jjtThis;}
}

ODeleteEdgeStatement DeleteEdgeStatement():
{ ODeleteEdgeStatement result; }
{
    (
        LOOKAHEAD(DeleteEdgeByRidStatement())
        result = DeleteEdgeByRidStatement()
        |
        LOOKAHEAD(DeleteEdgeFromToStatement())
        result = DeleteEdgeFromToStatement()
        |
        LOOKAHEAD(DeleteEdgeVToStatement())
        result = DeleteEdgeVToStatement()
        |
        LOOKAHEAD(DeleteEdgeToStatement())
        result = DeleteEdgeToStatement()
        |
        LOOKAHEAD(DeleteEdgeWhereStatement())
        result = DeleteEdgeWhereStatement()
    )
    {return result;}
}


ODeleteEdgeStatement DeleteEdgeByRidStatement():
{
    ORid lastRid;
}
{
(
	<DELETE>
	<EDGE>
	(
	    jjtThis.rid = Rid()
	    |
	    (

	        <LBRACKET>
            [
                lastRid = Rid()
                {
                    jjtThis.rids = new ArrayList();
                    jjtThis.rids.add(lastRid);
                }
                (
                    <COMMA>
                    lastRid = Rid() { jjtThis.rids.add(lastRid); }
                )*
            ] <RBRACKET>
	    )
	)
	[ jjtThis.batch = Batch() ]


) {return jjtThis;}
}



ODeleteEdgeStatement DeleteEdgeFromToStatement():
{
    ORid lastRid;
}
{
(
	<DELETE>
	<EDGE>

	[ jjtThis.className = Identifier() ]


        <FROM>
        (
            jjtThis.leftRid = Rid()
            |
            (
                <LBRACKET>
                [
                    lastRid = Rid()
                    {
                        jjtThis.leftRids=new ArrayList();
                        jjtThis.leftRids.add(lastRid);
                    }
                    (
                        <COMMA>
                        lastRid = Rid() { jjtThis.leftRids.add(lastRid); }
                    )*
                ] <RBRACKET>
            )
            |
            (
                <LPAREN>
                (
                    LOOKAHEAD(SelectStatement()) jjtThis.leftStatement = SelectStatement()
                    |
                    LOOKAHEAD(SelectWithoutTargetStatement()) jjtThis.leftStatement = SelectWithoutTargetStatement()
                )
                <RPAREN>
            )
            |
            jjtThis.leftParam = InputParameter()
            |
            jjtThis.leftIdentifier = Identifier()
        )

        [
            <TO>
            (
                 jjtThis.rightRid = Rid()
                |
                (
                    <LBRACKET>
                    [
                        lastRid = Rid()
                        {
                            jjtThis.rightRids=new ArrayList();
                            jjtThis.rightRids.add(lastRid);
                        }
                        (
                            <COMMA>
                            lastRid = Rid() { jjtThis.rightRids.add(lastRid); }
                        )*
                    ] <RBRACKET>
                )
                |
                (
                    <LPAREN>
                    (
                        LOOKAHEAD(SelectStatement()) jjtThis.rightStatement = SelectStatement()
                        |
                        LOOKAHEAD(SelectWithoutTargetStatement()) jjtThis.rightStatement = SelectWithoutTargetStatement()
                    )
                    <RPAREN>
                )
                |
                jjtThis.rightParam = InputParameter()
                |
                jjtThis.rightIdentifier = Identifier()
            )
        ]



    [ <WHERE> jjtThis.whereClause = WhereClause() ]
    [ jjtThis.limit = Limit() ]
    [ jjtThis.batch = Batch() ]

) {return jjtThis;}
}


ODeleteEdgeStatement DeleteEdgeToStatement():
{
    ORid lastRid;
}
{
    (
        <DELETE>
        <EDGE>

        jjtThis.className = Identifier()

        <TO>
        (
             jjtThis.rightRid = Rid()
            |
            (
                <LBRACKET>
                [
                    lastRid = Rid()
                    {
                        jjtThis.rightRids=new ArrayList();
                        jjtThis.rightRids.add(lastRid);
                    }
                    (
                        <COMMA>
                        lastRid = Rid() { jjtThis.rightRids.add(lastRid); }
                    )*
                ] <RBRACKET>
            )
            |
            (
                <LPAREN>
                (
                    LOOKAHEAD(SelectStatement()) jjtThis.rightStatement = SelectStatement()
                    |
                    LOOKAHEAD(SelectWithoutTargetStatement()) jjtThis.rightStatement = SelectWithoutTargetStatement()
                )
                <RPAREN>
            )
            |
            jjtThis.rightParam = InputParameter()
            |
            jjtThis.rightIdentifier = Identifier()
        )


        [ <WHERE> jjtThis.whereClause = WhereClause() ]
        [ jjtThis.limit = Limit() ]
        [ jjtThis.batch = Batch() ]

	)
     {return jjtThis;}
}

ODeleteEdgeStatement DeleteEdgeVToStatement():
{
    ORid lastRid;
}
{
    (
        <DELETE>
        <EDGE>

        <TO>
        (
             jjtThis.rightRid = Rid()
            |
            (
                <LBRACKET>
                [
                    lastRid = Rid()
                    {
                        jjtThis.rightRids=new ArrayList();
                        jjtThis.rightRids.add(lastRid);
                    }
                    (
                        <COMMA>
                        lastRid = Rid() { jjtThis.rightRids.add(lastRid); }
                    )*
                ] <RBRACKET>
            )
            |
            (
                <LPAREN>
                (
                    LOOKAHEAD(SelectStatement()) jjtThis.rightStatement = SelectStatement()
                    |
                    LOOKAHEAD(SelectWithoutTargetStatement()) jjtThis.rightStatement = SelectWithoutTargetStatement()
                )
                <RPAREN>
            )
            |
            jjtThis.rightParam = InputParameter()
            |
            jjtThis.rightIdentifier = Identifier()
        )


        [ <WHERE> jjtThis.whereClause = WhereClause() ]
        [ jjtThis.limit = Limit() ]
        [ jjtThis.batch = Batch() ]

	)
     {return jjtThis;}
}

ODeleteEdgeStatement DeleteEdgeWhereStatement():
{
    ORid lastRid;
}
{
    (
        <DELETE>
        <EDGE>

        [ jjtThis.className = Identifier() ]

        [ <WHERE> jjtThis.whereClause = WhereClause() ]
        [ jjtThis.limit = Limit() ]
        [ jjtThis.batch = Batch() ]
	)
     {return jjtThis;}
}

OUpdateEdgeStatement UpdateEdgeStatement():
{ OUpdateOperations lastOperations;
 ORid lastRid;}
{
  (
	<UPDATE>
	<EDGE>
	jjtThis.target = FromClause()
	( lastOperations = UpdateOperations() { jjtThis.operations.add(lastOperations); } )+
	[ <UPSERT> { jjtThis.upsert = true; } ]
	[
		<RETURN>
		( <BEFORE> { jjtThis.returnBefore = true; } | <AFTER> { jjtThis.returnAfter = true; } )
		[
			jjtThis.returnProjection = Projection()
		]
	]
	[ <WHERE> jjtThis.whereClause = WhereClause() ]
	[ <LOCK>
        (
            <RECORD> {jjtThis.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.EXCLUSIVE_LOCK;}
            |
            <NONE> {jjtThis.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.NONE;}
            |
            <SHARED> {jjtThis.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.SHARED_LOCK;}
            |
            <DEFAULT_> {jjtThis.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.DEFAULT;}
        )
    ]
	[ jjtThis.limit = Limit() ]
	[ jjtThis.timeout = Timeout() ]
  )
  {return jjtThis;}
}

OUpdateStatement UpdateStatement():
{ OUpdateOperations lastOperations;
 ORid lastRid;}
{
    (
    	<UPDATE>
    	jjtThis.target = FromClause()
    	( lastOperations = UpdateOperations() { jjtThis.operations.add(lastOperations); } )+
    	[ <UPSERT> { jjtThis.upsert = true; } ]
    	[
    	    <RETURN>
    	    ( <BEFORE> { jjtThis.returnBefore = true; } | <AFTER> { jjtThis.returnAfter = true; } )
    	    [
    	        jjtThis.returnProjection = Projection()
    	    ]
    	]
    	[ <WHERE> jjtThis.whereClause = WhereClause() ]
    	[ <LOCK>
            (
                <RECORD> {jjtThis.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.EXCLUSIVE_LOCK;}
                |
                <NONE> {jjtThis.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.NONE;}
                |
                <SHARED> {jjtThis.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.SHARED_LOCK;}
                |
                <DEFAULT_> {jjtThis.lockRecord = com.orientechnologies.orient.core.storage.OStorage.LOCKING_STRATEGY.DEFAULT;}
            )
        ]
    	[ jjtThis.limit = Limit() ]
    	[ jjtThis.timeout = Timeout() ]
    )
    {return jjtThis;}
}

OUpdateOperations UpdateOperations():
{
    OUpdateItem lastItem;
    OUpdatePutItem lastPutItem;
    OUpdateIncrementItem lastIncrementItem;
    OUpdateRemoveItem lastRemoveItem;
}
{
    (
        (
            <SET> { jjtThis.type = OUpdateOperations.TYPE_SET; }
            lastItem = UpdateItem() { jjtThis.updateItems.add(lastItem); }
            (
                <COMMA> lastItem = UpdateItem() { jjtThis.updateItems.add(lastItem); }
            )*
        )
        |
        (
            <PUT> { jjtThis.type = OUpdateOperations.TYPE_PUT; }
            lastPutItem = UpdatePutItem()  { jjtThis.updatePutItems.add(lastPutItem); }
            (
                <COMMA> lastPutItem = UpdatePutItem()  { jjtThis.updatePutItems.add(lastPutItem); }
            )*
        )
        |
        (
            (
                <MERGE> { jjtThis.type = OUpdateOperations.TYPE_MERGE; }
                |
                <CONTENT> { jjtThis.type = OUpdateOperations.TYPE_CONTENT; }
            )
            jjtThis.json = Json()
        )
        |
        (
            (
                <INCREMENT> { jjtThis.type = OUpdateOperations.TYPE_INCREMENT; }
                |
                <ADD> { jjtThis.type = OUpdateOperations.TYPE_ADD; }
            )
            lastIncrementItem = UpdateIncrementItem() { jjtThis.updateIncrementItems.add(lastIncrementItem); }
            (
                <COMMA> lastIncrementItem = UpdateIncrementItem() { jjtThis.updateIncrementItems.add(lastIncrementItem); }
            )*
         )
         |
         (
            <REMOVE> { jjtThis.type = OUpdateOperations.TYPE_REMOVE; }
            lastRemoveItem = UpdateRemoveItem()  { jjtThis.updateRemoveItems.add(lastRemoveItem); }
            (
                <COMMA>
                lastRemoveItem = UpdateRemoveItem()  { jjtThis.updateRemoveItems.add(lastRemoveItem); }
            )*
         )
    )
    { return jjtThis; }
}


OUpdateItem UpdateItem():
{}
{
(
	jjtThis.left = Identifier()
	[ jjtThis.leftModifier = Modifier() ]
	(
	    <EQ> { jjtThis.operator = OUpdateItem.OPERATOR_EQ; }
	    |
	    <PLUSASSIGN> { jjtThis.operator = OUpdateItem.OPERATOR_PLUSASSIGN; }
        |
        <MINUSASSIGN> { jjtThis.operator = OUpdateItem.OPERATOR_MINUSASSIGN; }
        |
        <STARASSIGN> { jjtThis.operator = OUpdateItem.OPERATOR_STARASSIGN; }
        |
        <SLASHASSIGN> { jjtThis.operator = OUpdateItem.OPERATOR_SLASHASSIGN; }
	)
	jjtThis.right = Expression()
) { return jjtThis; }
}

OUpdateIncrementItem UpdateIncrementItem():
{}
{
    (
	    jjtThis.left = Identifier()
	    [ jjtThis.leftModifier = Modifier() ]
	    <EQ>
	    jjtThis.right = Expression()
	)
	{ return jjtThis; }
}

OUpdateRemoveItem UpdateRemoveItem():
{}
{
    (
	    jjtThis.left = Identifier()
	    [ jjtThis.leftModifier = Modifier() ]
	    [ <EQ> jjtThis.right = Expression() ]
	)
    { return jjtThis; }
}

OUpdatePutItem UpdatePutItem():
{}
{
    (
	    jjtThis.left = Identifier() <EQ> jjtThis.key = Expression() <COMMA> jjtThis.value = Expression()
    )
    { return jjtThis; }
}


OUpdateAddItem UpdateAddItem():
{}
{
    (
    	jjtThis.left = Identifier() <EQ>
    	jjtThis.right = Expression()
    )
    { return jjtThis; }
}


OInsertStatement InsertStatement():
{}
{
(
	<INSERT>
	<INTO>
	(
	    LOOKAHEAD(IndexIdentifier())
    	jjtThis.targetIndex = IndexIdentifier()
    	|
	    jjtThis.targetClass = Identifier() [<CLUSTER> jjtThis.targetClusterName = Identifier()]
	    |
	    jjtThis.targetCluster = Cluster()

	)
    [ LOOKAHEAD(InsertBody()) jjtThis.insertBody = InsertBody() ]
    [ <RETURN> jjtThis.returnStatement = Projection() ]
    [
        [ <FROM> { jjtThis.selectWithFrom = true; } ]
        (
             jjtThis.selectStatement = SelectStatement()
             |
             LOOKAHEAD(2)
            (
                <LPAREN> jjtThis.selectStatement = SelectStatement() { jjtThis.selectInParentheses = true; } <RPAREN>
            )
        )
    ]
    [ <UNSAFE> { jjtThis.unsafe = true; }]
) {return jjtThis;}
}


OInsertBody InsertBody():
{
    OIdentifier lastIdentifier;
    OExpression lastExpression;
    List<OExpression> lastExpressionList;
}
{
    (
        (
            LOOKAHEAD(3)
            (
                <LPAREN>
                lastIdentifier = Identifier()
                {
                    jjtThis.identifierList = new ArrayList<OIdentifier>();
                    jjtThis.identifierList.add(lastIdentifier);
                }
                (
                    <COMMA>
                    lastIdentifier = Identifier() { jjtThis.identifierList.add(lastIdentifier); }
                )*
                <RPAREN>
                <VALUES>
                <LPAREN>
                {
                    jjtThis.valueExpressions = new ArrayList<List<OExpression>>();
                    lastExpressionList = new ArrayList<OExpression>();
                    jjtThis.valueExpressions.add(lastExpressionList);
                }
                lastExpression = Expression() { lastExpressionList.add(lastExpression); }
                (
                    <COMMA>
                    lastExpression = Expression() { lastExpressionList.add(lastExpression); }
                )*
                <RPAREN>
                (
                    <COMMA>
                    <LPAREN>
                    {
                        lastExpressionList = new ArrayList<OExpression>();
                        jjtThis.valueExpressions.add(lastExpressionList);
                    }
                    lastExpression = Expression() { lastExpressionList.add(lastExpression); }
                    (
                        <COMMA>
                        lastExpression = Expression() { lastExpressionList.add(lastExpression); }
                    )*
                    <RPAREN>
                )*
            )
            |
            LOOKAHEAD(3)
            (
                <SET>
                {
                    jjtThis.setExpressions = new ArrayList<OInsertSetExpression>();
                    OInsertSetExpression lastSetExpr = new OInsertSetExpression();
                    jjtThis.setExpressions.add(lastSetExpr);
                }
                lastSetExpr.left = Identifier() <EQ> lastSetExpr.right = Expression()

                (
                    <COMMA>
                    {
                         lastSetExpr = new OInsertSetExpression();
                         jjtThis.setExpressions.add(lastSetExpr);
                    }
                    lastSetExpr.left = Identifier() <EQ> lastSetExpr.right = Expression()
                )*
            )
            |
            ( <CONTENT> jjtThis.content = Json() )
         )
         //[ <RETURN> jjtThis.returnProjection = Projection() ]
    )
    { return jjtThis; }
}

OCreateVertexStatementEmptyNoTarget CreateVertexStatementEmptyNoTarget():
{}
{
	<CREATE>
	<VERTEX>
	{return jjtThis;}
}

OCreateVertexStatementEmpty CreateVertexStatementEmpty():
{}
{

	<CREATE>
	<VERTEX>
	jjtThis.targetClass = Identifier()
    [
        <CLUSTER>
        jjtThis.targetClusterName = Identifier()
    ]
    {return jjtThis;}
}


OCreateVertexStatement CreateVertexStatement():
{}
{
(
	<CREATE>
	<VERTEX>
	(
	    LOOKAHEAD( Identifier() )
	    (
	        jjtThis.targetClass = Identifier()
	        [
	            <CLUSTER>
	            jjtThis.targetClusterName = Identifier()
	        ]
	    )
	    |
	    LOOKAHEAD( Cluster() )
	    jjtThis.targetCluster = Cluster()
	)
	[ <RETURN> jjtThis.returnStatement = Projection() ]
	[ LOOKAHEAD(InsertBody()) jjtThis.insertBody = InsertBody() ]
) {return jjtThis;}
}


OCreateVertexStatementNoTarget CreateVertexStatementNoTarget():
{}
{
(
	<CREATE>
	<VERTEX>
	jjtThis.insertBody = InsertBody()
) {return jjtThis;}
}


OCreateEdgeStatement CreateEdgeStatement():
{
    ORid lastRid;
}
{
(
	<CREATE>
	<EDGE>
	[ jjtThis.targetClass = Identifier() [<CLUSTER> jjtThis.targetClusterName = Identifier()]]
	<FROM>
	(
	    jjtThis.leftExpression = Expression()
	)
	<TO>
	(
	    jjtThis.rightExpression = Expression()
	)
    [ jjtThis.body = InsertBody() ]
    [ jjtThis.retry = Retry() ]
    [ jjtThis.wait = Wait() ]
    [ jjtThis.batch = Batch() ]
) {return jjtThis;}
}


OInputParameter InputParameter():
{ OInputParameter result; }
{
    (
	    result = PositionalParameter()
	    |
	    result = NamedParameter()
    )
    { return result; }
}

OPositionalParameter PositionalParameter():
{}
{
	<HOOK>
	{
	    jjtThis.paramNumber = inputParamCount;
	    inputParamCount++;
	    return jjtThis;
	}
}

ONamedParameter NamedParameter():
{
OIdentifier identifierParam;
Token token;
}
{
    (
	    <COLON>
	    (
	    	identifierParam = Identifier() { jjtThis.paramName = identifierParam.toString(); }
	    	|
	    	token = <SKIP2> {jjtThis.paramName = token.image;}
	    	|
            token = <LIMIT> {jjtThis.paramName = token.image;}
	    )
	)
	{
	 jjtThis.paramNumber = inputParamCount;
     inputParamCount++;
	 return jjtThis;
	}
}

OProjection Projection():
{
    java.util.List<OProjectionItem> items = new java.util.ArrayList<OProjectionItem>();
    OProjectionItem lastItem = null;
}
{
    (
	 	lastItem = ProjectionItem() {items.add(lastItem);} ( "," lastItem = ProjectionItem() {items.add(lastItem);} )*
	)
	{
	    jjtThis.items = items;
	    return jjtThis;
	}
}

OProjectionItem ProjectionItem():
{}
{
(
    jjtThis.expression = Expression()
    [ <AS> jjtThis.alias = Alias() ]
){return jjtThis;}
}


OArraySelector ArraySelector():
{}
{
    (
    	LOOKAHEAD( Rid() )
    	jjtThis.rid = Rid()
    	|
    	LOOKAHEAD( InputParameter() )
        jjtThis.inputParam = InputParameter()
        |
        LOOKAHEAD( Expression() )
    	jjtThis.expression = Expression()
    )
    { return jjtThis; }
}

OArrayNumberSelector ArrayNumberSelector():
{ Token tokenVal; }
{
    (
    	LOOKAHEAD( InputParameter() )
        jjtThis.inputValue = InputParameter()
        |
        LOOKAHEAD( Integer() )
        tokenVal = <INTEGER_LITERAL> { jjtThis.integer = Integer.parseInt(tokenVal.image); }
        /* TODO for 3.0
        |
        LOOKAHEAD( MathExpression() )
    	jjtThis.expressionValue = MathExpression()
    	*/

    )
    { return jjtThis; }
}

OArraySingleValuesSelector ArraySingleValuesSelector():
{ OArraySelector lastSelector; }
{
    (
        lastSelector = ArraySelector() { jjtThis.items.add(lastSelector); }
        ( <COMMA> lastSelector = ArraySelector() { jjtThis.items.add(lastSelector); } ) *
    )
    { return jjtThis; }
}

OArrayRangeSelector ArrayRangeSelector():
{ Token token; }
{
    (

    /* TODO for 3.0
        token = <INTEGER_RANGE>
        {
            String img = token.image;
            String[] splitted = img.split("..");
            jjtThis.from = Integer.parseInt(splitted[0], 10);
            jjtThis.to = Integer.parseInt(splitted[1], 10);
        }
        |
        */
        (
            jjtThis.fromSelector = ArrayNumberSelector() [ <MINUS> | <RANGE>  { jjtThis.newRange = true; } ] jjtThis.toSelector = ArrayNumberSelector()
        )
    )
    { return jjtThis; }
}


OIdentifier Alias():
{ OIdentifier identifier; }
{
	identifier = Identifier()
	{return identifier;}
}

ORecordAttribute RecordAttribute():
{ Token token; }
{
    (
	    token = <RECORD_ATTRIBUTE> { jjtThis.name = token.image; }
	)
	{ return jjtThis; }
}

OFunctionCall FunctionCall():
{
    OExpression lastExpression = null;
}
{
    (
    	(
    	    jjtThis.name = Identifier()
    	)
    	<LPAREN>
    	(
            [
            lastExpression = Expression() {jjtThis.params.add(lastExpression);} ( <COMMA> lastExpression = Expression() {jjtThis.params.add(lastExpression);})*
            ]

    	)
    	<RPAREN>
    )
    { return jjtThis; }
}

OMethodCall MethodCall():
{ OExpression lastExpression; }
{
    (
        <DOT> jjtThis.methodName = Identifier()
        <LPAREN> [
            lastExpression = Expression() { jjtThis.params.add(lastExpression); }
            ( <COMMA> lastExpression = Expression() { jjtThis.params.add(lastExpression); } )*
        ] <RPAREN>
    )
    { return jjtThis; }
}

OLevelZeroIdentifier LevelZeroIdentifier():
{}
{
    (
        LOOKAHEAD( FunctionCall() )
        jjtThis.functionCall = FunctionCall()
        |
        <THIS> { jjtThis.self = true; }
        |
        LOOKAHEAD( Collection() )
        jjtThis.collection = Collection()
    )
    { return jjtThis; }
}

OSuffixIdentifier SuffixIdentifier():
{}
{
    (
        LOOKAHEAD( Identifier() )
        jjtThis.identifier = Identifier()
        |
        LOOKAHEAD( RecordAttribute() )
        jjtThis.recordAttribute = RecordAttribute()
        |
        ( <STAR> { jjtThis.star = true; } )
    )
    { return jjtThis; }
}


OBaseIdentifier BaseIdentifier():
{}
{
    (
        LOOKAHEAD( LevelZeroIdentifier() )
        jjtThis.levelZero = LevelZeroIdentifier()
        |
        LOOKAHEAD( SuffixIdentifier() )
        jjtThis.suffix = SuffixIdentifier()
    )
    { return jjtThis; }
}

OModifier Modifier():
{}
{
    (
        (
            (
                <LBRACKET> { jjtThis.squareBrackets = true; }
                (
                    LOOKAHEAD( ArrayRangeSelector() )
                    jjtThis.arrayRange = ArrayRangeSelector()
                    |
                    LOOKAHEAD( OrBlock() )
                    jjtThis.condition = OrBlock()
                    |
                    LOOKAHEAD( ArraySingleValuesSelector() )
                    jjtThis.arraySingleValues = ArraySingleValuesSelector()
                )
                <RBRACKET>
            )
       	    |
       	    LOOKAHEAD( MethodCall() )
   	        jjtThis.methodCall = MethodCall()
       	    |
            <DOT> jjtThis.suffix = SuffixIdentifier()
        )
        [
            LOOKAHEAD( Modifier() )
            jjtThis.next = Modifier()
        ]
    )
    { return jjtThis; }
}

OExpression Expression():
{Token token; }
{
    (
        <NULL> {jjtThis.value = null;}
        |
        LOOKAHEAD( Rid() )
        jjtThis.value = Rid()
        |
        LOOKAHEAD( MathExpression() )
        jjtThis.value = MathExpression()
        |
        jjtThis.value = Json()
        |
        <TRUE> {jjtThis.value = true;}
        |
        <FALSE> {jjtThis.value = false;}
	)
	{ return jjtThis; }
}

OMathExpression MathExpression():
{
    OMathExpression sub;
    jjtThis.setChildExpressions(new java.util.ArrayList());
}
{
    (
	    sub = MultExpression() { jjtThis.getChildExpressions().add(sub); }
	    (
	        LOOKAHEAD( 2 ) ( <PLUS> { jjtThis.operators.add( OMathExpression.Operator.PLUS); } | <MINUS> { jjtThis.operators.add(OMathExpression.Operator.MINUS); })
	        sub = MultExpression() { jjtThis.getChildExpressions().add(sub); }
	    )*
	)
	{
	    if(jjtThis.getChildExpressions().size() != 1){
	        return jjtThis;
	    }else{
	        return jjtThis.getChildExpressions().get(0);
	    }
	}
}


OMathExpression MultExpression():
{
    OMathExpression sub;
    jjtThis.setChildExpressions(new java.util.ArrayList());
}
{
    (
        sub = FirstLevelExpression()  { jjtThis.getChildExpressions().add(sub); }
        (
            LOOKAHEAD( 2 )
            (
                <STAR> { jjtThis.operators.add( OMathExpression.Operator.STAR); }
                |
                <SLASH> { jjtThis.operators.add( OMathExpression.Operator.SLASH); }
                |
                <REM> { jjtThis.operators.add( OMathExpression.Operator.REM); }
            )
            sub = FirstLevelExpression()  { jjtThis.getChildExpressions().add(sub); }
        )*
    )
    {
	    if(jjtThis.getChildExpressions().size() != 1){
	        return jjtThis;
	    }else{
	        return jjtThis.getChildExpressions().get(0);
	    }
	}
}

OMathExpression FirstLevelExpression():
{ OMathExpression expr;}
{
    (
        LOOKAHEAD( ParenthesisExpression() )
        expr = ParenthesisExpression()
        |
        LOOKAHEAD( BaseExpression() )
        expr = BaseExpression()
    )
    {return expr;}
}

OMathExpression ParenthesisExpression():
{}
{
    (
	    <LPAREN>
	    (
	        LOOKAHEAD(2)
	        jjtThis.statement = QueryStatement()
	        |
	        jjtThis.expression = Expression()
	        |
            jjtThis.statement = InsertStatement()
        )
	    <RPAREN>
	)
	{return jjtThis;}
}

OBaseExpression BaseExpression():
{}
{
    (
        jjtThis.number = Number()
        |
        (
    	    jjtThis.identifier = BaseIdentifier()
    	    [
    	        LOOKAHEAD( Modifier() )
    	        jjtThis.modifier = Modifier()
    	    ]
    	)
    	|
    	(
    	    jjtThis.inputParam = InputParameter()
    	    [
    	        LOOKAHEAD( Modifier() )
    	        jjtThis.modifier = Modifier()
    	    ]
    	)
    	|
        (
            (
                token = <STRING_LITERAL> { jjtThis.string = token.image; }
                |
                token = <CHARACTER_LITERAL> { jjtThis.string = token.image; }
            )
            [
                LOOKAHEAD( Modifier() )
                jjtThis.modifier = Modifier()
            ]
        )

	)
	{return jjtThis;}
}



OFromClause FromClause():
{}
{
	jjtThis.item = FromItem()
	{ return jjtThis; }
}

OLetClause LetClause():
{
    OLetItem lastItem;
}
{
    (
        <LET> lastItem = LetItem() { jjtThis.items.add(lastItem); } ( <COMMA> lastItem = LetItem() { jjtThis.items.add(lastItem); } )*
    )
    { return jjtThis; }
}

OLetItem LetItem():
{ }
{
    (
    	jjtThis.varName = Identifier() <EQ>
    	(
    	    LOOKAHEAD( Expression() )
    	    jjtThis.expression = Expression()
    	    |
    	    (
    	        <LPAREN>
    	        (
    	            jjtThis.query = QueryStatement()
    	        )
    	        <RPAREN>
    	    )
    	)
    )
    { return jjtThis; }
}


OFromItem FromItem():
{
    jjtThis.rids = new java.util.ArrayList();
    ORid lastRid;
}
{
    (
    	lastRid = Rid() { jjtThis.rids.add(lastRid); }
    	|
    	/*(
    	    <LBRACKET> lastRid = Rid() { jjtThis.rids.add(lastRid); }
    	    (
    	        <COMMA> lastRid = Rid() { jjtThis.rids.add(lastRid); }
    	    )* <RBRACKET>
    	)
    	|*/
    	jjtThis.cluster = Cluster()
    	|
    	jjtThis.clusterList = ClusterList()
    	|
    	LOOKAHEAD(IndexIdentifier())
    	jjtThis.index = IndexIdentifier()
    	|
        jjtThis.metadata = MetadataIdentifier()
    	|
    	<LPAREN> jjtThis.statement = QueryStatement() <RPAREN>
    	|
    	jjtThis.inputParam = InputParameter()
    	|
    	(
            jjtThis.identifier = BaseIdentifier()
            [
                LOOKAHEAD( Modifier() )
                jjtThis.modifier = Modifier()
            ]
        )
    )
    { return jjtThis; }
}

OCluster Cluster():
{ Token cName; }
{
    (
	    cName = <CLUSTER_IDENTIFIER> {jjtThis.clusterName = cName.image.split(":")[1];}
		|
	    cName = <CLUSTER_NUMBER_IDENTIFIER> {jjtThis.clusterNumber = Integer.parseInt(cName.image.split(":")[1]);}

	)
    { return jjtThis; }
}

OClusterList ClusterList():
{ OIdentifier lastIdentifier; }
{
    (
	     <CLUSTER> <COLON> <LBRACKET>
	     [
	        lastIdentifier = Identifier() { jjtThis.clusters.add(lastIdentifier); }
	        ( <COMMA> lastIdentifier = Identifier() { jjtThis.clusters.add(lastIdentifier); } )*
	     ]
	     <RBRACKET>
	)
    { return jjtThis; }
}

OMetadataIdentifier MetadataIdentifier():
{ Token mdName; }
{
    (
	    mdName = <METADATA_IDENTIFIER> {jjtThis.name = mdName.image.split(":")[1];}
	)
    { return jjtThis; }
}

OIndexName IndexName():
{
    StringBuilder builder = new StringBuilder();
    Token token;
    OIdentifier lastIdentifier;
}
{
    (
      ( "__@recordmap@___" { builder.append("__@recordmap@___"); } )?

      lastIdentifier = Identifier() { builder.append(lastIdentifier.getValue()); }
      (
        (
            <DOT> { builder.append("."); }
            |
            <MINUS> { builder.append("-"); }
        )
        lastIdentifier = Identifier() { builder.append(lastIdentifier.getValue()); }
      )*
    )
    {
        jjtThis.value = builder.toString();
        return jjtThis;
    }
}


OIndexIdentifier IndexIdentifier():
{
    Token token;
}
{
    (
        (
            <INDEX_COLON>
            jjtThis.indexName = IndexName() { jjtThis.type = OIndexIdentifier.Type.INDEX; }
        )
        |
        (
            (
                token = <INDEXVALUES_IDENTIFIER> { jjtThis.type = OIndexIdentifier.Type.VALUES; }
                |
                token = <INDEXVALUESASC_IDENTIFIER> { jjtThis.type = OIndexIdentifier.Type.VALUESASC; }
                |
                token = <INDEXVALUESDESC_IDENTIFIER> { jjtThis.type = OIndexIdentifier.Type.VALUESDESC; }
            )
            {
                jjtThis.indexNameString = token.image.split(":")[1];
            }
        )
    )
    { return jjtThis; }
}

OWhereClause WhereClause():
{}
{
	jjtThis.baseExpression = OrBlock()
	{return jjtThis;}
}

OOrBlock OrBlock():
{ OAndBlock lastAnd = null; }
{
    (
    	lastAnd = AndBlock() { jjtThis.getSubBlocks().add(lastAnd); }
    	( <OR> lastAnd = AndBlock() { jjtThis.getSubBlocks().add(lastAnd); } )*
    )
    { return jjtThis; }
}

OAndBlock AndBlock():
{ONotBlock lastNot = null; }
{
(
    lastNot = NotBlock() { jjtThis.getSubBlocks().add(lastNot); }
    ( <AND> lastNot = NotBlock() { jjtThis.getSubBlocks().add(lastNot); } )*
) { return jjtThis; }
}

ONotBlock NotBlock():
{}
{
(
    (
        <NOT> {jjtThis.negate = true;}
        (
            LOOKAHEAD( ConditionBlock() )
            jjtThis.sub = ConditionBlock()
            |
            LOOKAHEAD( ParenthesisBlock() )
            jjtThis.sub = ParenthesisBlock()
        )
    )
    |
    (
        LOOKAHEAD( ConditionBlock() )
        jjtThis.sub = ConditionBlock()
        |
        LOOKAHEAD( ParenthesisBlock() )
        jjtThis.sub = ParenthesisBlock()
    )
) { return jjtThis; }
}

OBooleanExpression ParenthesisBlock():
{}
{
    (
    	<LPAREN> jjtThis.subElement = OrBlock() <RPAREN>
    )
    { return jjtThis; }
}

OBooleanExpression ConditionBlock():
{OBooleanExpression result = null;}
{
(
	LOOKAHEAD( IsNotNullCondition() )
	result = IsNotNullCondition()
	|
	LOOKAHEAD( IsNullCondition() )
	result = IsNullCondition()
	|
	LOOKAHEAD( IsNotDefinedCondition() )
	result = IsNotDefinedCondition()
	|
	LOOKAHEAD( IsDefinedCondition() )
	result = IsDefinedCondition()
	|
	LOOKAHEAD( InCondition() )
    result = InCondition()
    |
    LOOKAHEAD( NotInCondition() )
    result = NotInCondition()
	|
	LOOKAHEAD( BinaryCondition() )
	result = BinaryCondition()
	|
	LOOKAHEAD( BetweenCondition() )
	result = BetweenCondition()
	|
	LOOKAHEAD( ContainsCondition() )
	result = ContainsCondition()
	|
	LOOKAHEAD( ContainsValueCondition() )
	result = ContainsValueCondition()
	|
	LOOKAHEAD( ContainsAllCondition() )
    result = ContainsAllCondition()
    |
    LOOKAHEAD( ContainsTextCondition() )
	result = ContainsTextCondition()
	|
	LOOKAHEAD( MatchesCondition() )
	result = MatchesCondition()
	|
	LOOKAHEAD( IndexMatchCondition() )
	result = IndexMatchCondition()
	|
    LOOKAHEAD( InstanceofCondition() )
    result = InstanceofCondition()
    |
    <TRUE> { result = OBooleanExpression.TRUE;}
    |
    <FALSE> { result = OBooleanExpression.FALSE;}
){ return result; }
}

OBinaryCompareOperator CompareOperator():
{  OBinaryCompareOperator result;}
{
(
		result = EqualsCompareOperator()
      | result = LtOperator()
      | result = GtOperator()
      | result = NeOperator()
      | result = NeqOperator()
      | result = GeOperator()
      | result = LeOperator()
      | result = LikeOperator()
      | result = ContainsKeyOperator()
      | result = LuceneOperator()
      | result = NearOperator()
      | result = WithinOperator()
      | result = ScAndOperator()

){return result;}
}


OLtOperator LtOperator():
{}
{
(
	<LT>
){return jjtThis;}
}

OGtOperator GtOperator():
{}
{
(
	<GT>
){return jjtThis;}
}

ONeOperator NeOperator():
{}
{
(
	<NE>
){return jjtThis;}
}

ONeqOperator NeqOperator():
{}
{
(
	<NEQ>
){return jjtThis;}
}

OGeOperator GeOperator():
{}
{
(
	<GE>
){return jjtThis;}
}

OLeOperator LeOperator():
{}
{
(
	<LE>
){return jjtThis;}
}

OLikeOperator LikeOperator():
{}
{
(
	<LIKE>
){return jjtThis;}
}

OLuceneOperator LuceneOperator():
{}
{
(
	<LUCENE>
){
    ValidationStats stats = validationStats.get(0);
    stats.luceneCount++;
//    if(stats.luceneCount > 1){
//        throw new OQueryParsingException("Two or more LUCENE operators are not allowed in the same query");
//    }
    return jjtThis;
}
}

ONearOperator NearOperator():
{}
{
(
	<NEAR>
){return jjtThis;}
}

OWithinOperator WithinOperator():
{}
{
(
	<WITHIN>
){return jjtThis;}
}

OScAndOperator ScAndOperator():
{}
{
(
	<SC_AND>
){return jjtThis;}
}

OContainsKeyOperator ContainsKeyOperator():
{}
{
(
	<CONTAINSKEY>
){return jjtThis;}
}

OContainsValueOperator ContainsValueOperator():
{}
{
(
	<CONTAINSVALUE>
){return jjtThis;}
}

OEqualsCompareOperator EqualsCompareOperator():
{}
{
(
	<EQ> { jjtThis.doubleEquals = false; }
	|
	<EQEQ> { jjtThis.doubleEquals = true; }
){return jjtThis;}
}

OBooleanExpression BinaryCondition():
{}
{
(
 	jjtThis.left = Expression()
 	jjtThis.operator = CompareOperator()
 	jjtThis.right = Expression()
){return jjtThis;}
}

OBooleanExpression ContainsValueCondition():
{}
{
(
    jjtThis.left = Expression()
    jjtThis.operator = ContainsValueOperator()
    (
        LOOKAHEAD( 3 )
        <LPAREN> jjtThis.condition = OrBlock() <RPAREN>
        |
        LOOKAHEAD( Expression() )
        jjtThis.expression = Expression()
    )
) { return jjtThis;}
}

OBooleanExpression InstanceofCondition():
{
    Token token;
}
{
    (
        jjtThis.left = Expression() <INSTANCEOF> (
		   jjtThis.right = Identifier()
		   |
		   token = <STRING_LITERAL> { jjtThis.rightString = token.image; }
		   |
		   token = <CHARACTER_LITERAL> { jjtThis.rightString = token.image; }
		)
    )
    {return jjtThis;}
}

OBooleanExpression IndexMatchCondition():
{
    Token token;
    jjtThis.leftExpressions = new ArrayList();
    OExpression lastExpression;
}
{
    (
     	<KEY>
     	(
     	    jjtThis.operator = CompareOperator() <LBRACKET>
     	    [
     	        lastExpression = Expression() { jjtThis.leftExpressions.add(lastExpression); }
     	        ( <COMMA>
     	            lastExpression = Expression() { jjtThis.leftExpressions.add(lastExpression); }
     	        )*
     	    ]
     	    <RBRACKET>
     	    |
     	    <BETWEEN> {jjtThis.between = true;} <LBRACKET>
     	    [
     	        lastExpression = Expression() { jjtThis.leftExpressions.add(lastExpression); }
     	        (
     	            <COMMA>
     	            lastExpression = Expression() { jjtThis.leftExpressions.add(lastExpression); }
     	        )*
     	    ]
     	    <RBRACKET> <AND> <LBRACKET>
     	    [
     	        lastExpression = Expression() { jjtThis.rightExpressions.add(lastExpression); }
     	        (
     	            <COMMA>
     	            lastExpression = Expression() { jjtThis.rightExpressions.add(lastExpression); }
     	        )*
     	    ] <RBRACKET>
     	)
    )
    {return jjtThis;}
}

OBooleanExpression BetweenCondition():
{}
{
(
	jjtThis.first = Expression() <BETWEEN>
	jjtThis.second = Expression() <AND>
	jjtThis.third = Expression()
){return jjtThis;}
}

OBooleanExpression IsNullCondition():
{}
{
    (
    	jjtThis.expression = Expression() <IS> <NULL>
    )
    {return jjtThis;}
}

OBooleanExpression IsNotNullCondition():
{}
{
(
	jjtThis.expression = Expression() <IS> <NOT> <NULL>
){return jjtThis;}
}

OBooleanExpression IsDefinedCondition():
{}
{
(
	jjtThis.expression = Expression() <IS> <DEFINED>
){return jjtThis;}
}

OBooleanExpression IsNotDefinedCondition():
{}
{
(
	jjtThis.expression = Expression() <IS> <NOT> <DEFINED>
){return jjtThis;}
}

OBooleanExpression ContainsCondition():
{}
{
    (
    	jjtThis.left = Expression() <CONTAINS>
    	(
    	    LOOKAHEAD( 3 )
    	    ( <LPAREN> jjtThis.condition = OrBlock() <RPAREN> )
    	    |
    	    LOOKAHEAD( Expression() )
    	    jjtThis.right = Expression()
    	)
    )
    {return jjtThis;}
}

OInOperator InOperator():
{}
{
    <IN>
    {return jjtThis;}
}

OBooleanExpression InCondition():
{
    OExpression lastExpression;
}
{
(
	jjtThis.left = Expression()
	jjtThis.operator = InOperator()
	(
	    LOOKAHEAD(2)
	    ( <LPAREN> jjtThis.rightStatement = SelectStatement() <RPAREN>)
	    |
	    LOOKAHEAD(2)
	    ( <LPAREN> jjtThis.rightParam = InputParameter() <RPAREN>)
	    |
        jjtThis.rightMathExpression = MathExpression()
	)
){return jjtThis;}
}

OBooleanExpression NotInCondition():
{
    OExpression lastExpression;
}
{
    (
    	jjtThis.left = Expression() <NOT> InOperator()
    	(
            LOOKAHEAD(2)
            ( <LPAREN> jjtThis.rightStatement = SelectStatement() <RPAREN>)
            |
            LOOKAHEAD(2)
            ( <LPAREN> jjtThis.rightParam = InputParameter() <RPAREN>)
            |
            jjtThis.rightMathExpression = MathExpression()
        )
    )
    {return jjtThis;}
}

OBooleanExpression ContainsAllCondition():
{}
{
    (
    	jjtThis.left = Expression()
    	<CONTAINSALL>
    	(
        	LOOKAHEAD( 3 )
        	( <LPAREN> jjtThis.rightBlock = OrBlock() <RPAREN> )
        	|
        	LOOKAHEAD( Expression() )
        	jjtThis.right = Expression()
        )
    )
    {return jjtThis;}
}

OBooleanExpression ContainsTextCondition():
{}
{
    (
    	jjtThis.left = Expression() <CONTAINSTEXT> jjtThis.right = Expression()
    )
    {return jjtThis;}
}

OBooleanExpression MatchesCondition():
{Token token;}
{
    (
    	jjtThis.expression = Expression() <MATCHES>
    	(
    	    ( token = <STRING_LITERAL> {jjtThis.right = token.image;} )
    	    |
    	    ( token = <CHARACTER_LITERAL> {jjtThis.right = token.image;} )
    	    |
            ( jjtThis.rightParam = InputParameter() )
    	)
    )

    {return jjtThis;}
}

OOrderBy OrderBy():
{
    jjtThis.items = new java.util.ArrayList();
    OOrderByItem lastItem;
    OIdentifier lastIdentifier;
    OModifier lastModifier;
    ORid lastRid;
    Token lastToken;
}
{
(
	<ORDER> <BY>
    (
        (
            (
                {
                    lastItem = new OOrderByItem();
                    jjtThis.items.add(lastItem);
                }
                (
                    (
                        lastIdentifier = Identifier() { lastItem.alias = lastIdentifier.toString(); }
                        [ lastModifier = Modifier()  { lastItem.modifier = lastModifier; } ]
                    )
                    |
                    lastItem.rid = Rid()
                    |
                    lastToken = <RECORD_ATTRIBUTE> { lastItem.recordAttr = lastToken.image; }
                )
            )
            [ <DESC> { lastItem.type = OOrderByItem.DESC; }| <ASC>  { lastItem.type = OOrderByItem.ASC; }]
        )
        |
        (
            <LPAREN>
            (
                {
                    lastItem = new OOrderByItem();
                    jjtThis.items.add(lastItem);
                }
                (
                    (
                        lastIdentifier = Identifier() { lastItem.alias = lastIdentifier.toString(); }
                        [ lastModifier = Modifier()  { lastItem.modifier = lastModifier; } ]
                    )
                    |
                    lastItem.rid = Rid()
                    |
                    lastToken = <RECORD_ATTRIBUTE> { lastItem.recordAttr = lastToken.image; }
                )
            )
            [ <DESC> { lastItem.type = OOrderByItem.DESC; }| <ASC>  { lastItem.type = OOrderByItem.ASC; }]
            <RPAREN>
        )
	)
	(
	    ","
	    (
	        (
                (
                    {
                        lastItem = new OOrderByItem();
                        jjtThis.items.add(lastItem);
                    }
                    (
                        (
                            lastIdentifier = Identifier() { lastItem.alias = lastIdentifier.toString(); }
                            [ lastModifier = Modifier()  { lastItem.modifier = lastModifier; } ]
                        )
                        |
                        lastItem.rid = Rid()
                        |
                        lastToken = <RECORD_ATTRIBUTE> { lastItem.recordAttr = lastToken.image; }
                    )
                )
                [ <DESC> { lastItem.type = OOrderByItem.DESC; }| <ASC>  { lastItem.type = OOrderByItem.ASC; }]
            )
            |
            (
                <LPAREN>
                (
                    {
                        lastItem = new OOrderByItem();
                        jjtThis.items.add(lastItem);
                    }
                    (
                        (
                            lastIdentifier = Identifier() { lastItem.alias = lastIdentifier.toString(); }
                            [ lastModifier = Modifier()  { lastItem.modifier = lastModifier; } ]
                        )
                        |
                        lastItem.rid = Rid()
                        |
                        lastToken = <RECORD_ATTRIBUTE> { lastItem.recordAttr = lastToken.image; }
                    )
                )
                [ <DESC> { lastItem.type = OOrderByItem.DESC; }| <ASC>  { lastItem.type = OOrderByItem.ASC; }]
                <RPAREN>
            )
        )
	)*
) {return jjtThis;}
}

OGroupBy GroupBy():
{ OExpression lastExpression; }
{
(
	<GROUP> <BY> lastExpression = Expression() { jjtThis.items.add(lastExpression); }
	(
	    ","
	    lastExpression = Expression() { jjtThis.items.add(lastExpression); }
	)*
) {return jjtThis;}
}

OUnwind Unwind():
{ OIdentifier lastIdentifier; }
{
(
	<UNWIND> lastIdentifier = Identifier() { jjtThis.items.add(lastIdentifier); }
	(
	    ","
	    lastIdentifier = Identifier() { jjtThis.items.add(lastIdentifier); }
	)*
) {return jjtThis;}
}


OLimit Limit():
{}
{
    (
    	<LIMIT>
    	(
            jjtThis.num  = Integer()
            |
            jjtThis.inputParam = InputParameter()
        )
    )
    { return jjtThis; }
}

OSkip Skip():
{ }
{
    (
        (
            <SKIP2>
            (
                jjtThis.num  = Integer()
                |
                jjtThis.inputParam = InputParameter()
            )
        )
    	|
    	(
    	    <OFFSET>
    	    (
                jjtThis.num  = Integer()
                |
                jjtThis.inputParam = InputParameter()
            )
        )
    ) {return jjtThis;}
}

OBatch Batch():
{}
{
    (
    	<BATCH>
    	(
            jjtThis.num  = Integer()
            |
            jjtThis.inputParam = InputParameter()
        )
    )
    { return jjtThis; }
}

OTimeout Timeout():
{ OInteger val; }
{
    <TIMEOUT>

    (
	    val = Integer() { jjtThis.val = val.getValue(); }
	    [
	        ( <RETURN> { jjtThis.failureStrategy = OTimeout.RETURN;} )
	        |
	        ( <EXCEPTION> { jjtThis.failureStrategy = OTimeout.EXCEPTION;} )
	    ]
	)
	{ return jjtThis; }
}


java.lang.Number Wait():
{ OInteger val; }
{
    (
	    <WAIT> val = Integer()
	)
	{ return val.getValue(); }
}


java.lang.Number Retry():
{ OInteger val; }
{
    (
	    <RETRY> val = Integer()
	)
	{ return val.getValue(); }
}







OCollection Collection():
{
    OExpression lastExpression;
}
{
    (

        <LBRACKET>
        [
            lastExpression = Expression() { jjtThis.expressions.add(lastExpression); }
            (
                <COMMA>
                lastExpression = Expression() { jjtThis.expressions.add(lastExpression); }
            )*
        ]
        <RBRACKET>
    )
    { return jjtThis; }
}



OFetchPlan FetchPlan():
{ OFetchPlanItem lastItem; }
{
    (
        <FETCHPLAN> lastItem = FetchPlanItem() { jjtThis.items.add(lastItem); }
        ( lastItem = FetchPlanItem() { jjtThis.items.add(lastItem); } )*
    )
    { return jjtThis; }
}

OFetchPlanItem FetchPlanItem():
{ OIdentifier lastIdentifier;
  boolean lastStarred = false;
}
{
    (
        (
            <STAR> { jjtThis.star = true; }
            |
            [
                <LBRACKET>
                (
                    jjtThis.leftDepth = Integer()
                    |
                    <STAR> { jjtThis.leftStar = true; }
                )
                <RBRACKET>
            ]
            lastIdentifier = Identifier() { lastStarred = false; } [<STAR> { lastStarred = true; }]
            {
                String field = lastIdentifier.getValue();
                if(lastStarred){
                    field += "*";
                }
                jjtThis.fieldChain.add(field);
            }
            (
                <DOT> lastIdentifier = Identifier()  { lastStarred = false; } [<STAR> { lastStarred = true; } ]
                 {
                     field = lastIdentifier.getValue();
                     if(lastStarred){
                         field += "*";
                     }
                     jjtThis.fieldChain.add(field);
                 }
            )*
        )
        <COLON> jjtThis.rightDepth = Integer()
    )
    { return jjtThis; }
}



OTraverseProjectionItem TraverseProjectionItem():
{}
{
    (
        jjtThis.base = BaseIdentifier()
        [ LOOKAHEAD( Modifier() ) jjtThis.modifier = Modifier() ]
    )
    { return jjtThis; }
}

OJson Json():
{
    OJsonItem lastItem;
    Token token;
}
{
    (
        <LBRACE>
        [
            { lastItem = new OJsonItem(); }
            (
                lastItem.leftIdentifier = Identifier()
                |
                token = <RECORD_ATTRIBUTE> {lastItem.leftString = token.image; }
                |
                token = <STRING_LITERAL> { lastItem.leftString = token.image.substring(1, token.image.length() - 1); }
                |
                token = <CHARACTER_LITERAL> { lastItem.leftString = token.image.substring(1, token.image.length() - 1); }
            )
            <COLON>
            lastItem.right = Expression() { jjtThis.items.add(lastItem); }
            (
                <COMMA>
                { lastItem = new OJsonItem(); }
                (
                    lastItem.leftIdentifier = Identifier()
                    |
                    token = <RECORD_ATTRIBUTE> {lastItem.leftString = token.image; }
                    |
                    token = <STRING_LITERAL> { lastItem.leftString = token.image.substring(1, token.image.length() - 1); }
                    |
                    token = <CHARACTER_LITERAL> { lastItem.leftString = token.image.substring(1, token.image.length() - 1); }
                )
                <COLON>
                lastItem.right = Expression() { jjtThis.items.add(lastItem); }
            )*
        ]
        <RBRACE>
    )
    {return jjtThis;}
}



OMatchExpression MatchExpression():
{ OMatchPathItem nextItem = null; }
{
    (
        jjtThis.origin = MatchFilter()
        (
            (
                LOOKAHEAD(3)
                nextItem = MatchPathItem()
                |
                LOOKAHEAD(3)
                nextItem = MultiMatchPathItemArrows()
                |
                LOOKAHEAD(3)
                nextItem = MultiMatchPathItem()
                |
                LOOKAHEAD(OutPathItem())
                nextItem = OutPathItem()
                |
                nextItem = InPathItem()
                |
                LOOKAHEAD(BothPathItem())
                nextItem = BothPathItem()
            )
            { jjtThis.items.add(nextItem); }
        )*
    ) { return jjtThis; }
}


OMatchPathItem MatchPathItem():
{}
{
    (
        jjtThis.method = MethodCall()
        [ jjtThis.filter = MatchFilter() ]
    ){ return jjtThis; }
}

OMatchPathItem MatchPathItemFirst():
{}
{
    (
        jjtThis.function = FunctionCall()
        [ jjtThis.filter = MatchFilter() ]
    ){ return jjtThis; }
}

OMatchPathItem MultiMatchPathItem():
{ OMatchPathItem nextItem = null; }
{
    (
        <DOT>
        <LPAREN>
        (
            nextItem = MatchPathItemFirst() { jjtThis.items.add(nextItem); }
        )
        (
            LOOKAHEAD(MatchPathItem())
            nextItem = MatchPathItem() { jjtThis.items.add(nextItem); }
        )*
        <RPAREN>
        [ jjtThis.filter = MatchFilter() ]
    ){ return jjtThis; }
}

OMatchPathItem MultiMatchPathItemArrows():
{
    OMatchPathItem prevItem = null;
    OMatchPathItem nextItem = null;
}
{
    (
        <DOT>
        <LPAREN>
        (
            (
                LOOKAHEAD( OutPathItemOpt() )
                nextItem = OutPathItemOpt()  { jjtThis.items.add(nextItem); }
                |
                LOOKAHEAD( InPathItemOpt() )
                nextItem = InPathItemOpt()  { jjtThis.items.add(nextItem); }
                |
                LOOKAHEAD( BothPathItemOpt() )
                nextItem = BothPathItemOpt()  { jjtThis.items.add(nextItem); }
            ){
                if(prevItem !=null && prevItem.filter == null){
                    throw new OQueryParsingException("MATCH sub-pattern with no square brackets");
                }
                prevItem = nextItem;
            }
        )+
        <RPAREN>
        [ jjtThis.filter = MatchFilter() ]
    ){ return jjtThis; }
}

OMatchFilter MatchFilter():
{ OMatchFilterItem lastItem = null; }
{
    (
        <LBRACE>
            [
                lastItem = MatchFilterItem() { jjtThis.items.add(lastItem); }
                (
                    <COMMA>
                    lastItem = MatchFilterItem() { jjtThis.items.add(lastItem); }
                )*
            ]
        <RBRACE>
    ) { return jjtThis; }
}

OMatchFilterItem MatchFilterItem():
{}
{
    (
        (
            <CLASS> <COLON> jjtThis.className = Expression()
        )
        |
        (
            <CLASSES> <COLON> jjtThis.classNames = Expression()
        )
        |
        (
            <AS> <COLON> jjtThis.alias = Identifier()
        )
        |
        (
            <WHERE> <COLON> <LPAREN>
            (
                jjtThis.filter = WhereClause()
            )
            <RPAREN>
        )
        |
        (
            <WHILE> <COLON> <LPAREN>
            (
                jjtThis.whileCondition = WhereClause()
            )
            <RPAREN>
        )
        |
        (
            <MAXDEPTH> <COLON> jjtThis.maxDepth = Integer()
        )
    )
    { return jjtThis; }
}

OMatchPathItem OutPathItem():
{ OIdentifier edgeName = null; }
{

        (
            (
                <MINUS>
                [edgeName = Identifier()]
                <MINUS>
            )
            |
            <DECR>
        )
        <GT>
        jjtThis.filter = MatchFilter()

    {
     if(edgeName==null){
        edgeName = new OIdentifier(-1);
        edgeName.value = "E";
     }
     jjtThis.method = new OMethodCall(-1);
     jjtThis.method.methodName = new OIdentifier(-1);
     jjtThis.method.methodName.value = "out";
     OExpression exp = new OExpression(-1);
     exp.value = edgeName.value;
     jjtThis.method.params.add(exp);
     return jjtThis;
    }
}

OMatchPathItem InPathItem():
{ OIdentifier edgeName = null; }
{

        <LT>
        (
            (
                <MINUS>
                [edgeName = Identifier()]
                <MINUS>
            )
            |
            <DECR>
        )
        jjtThis.filter = MatchFilter()

    {
     if(edgeName==null){
        edgeName = new OIdentifier(-1);
        edgeName.value = "E";
     }
     jjtThis.method = new OMethodCall(-1);
     jjtThis.method.methodName = new OIdentifier(-1);
     jjtThis.method.methodName.value = "in";
     OExpression exp = new OExpression(-1);
     exp.value = edgeName.value;
     jjtThis.method.params.add(exp);
     return jjtThis;
    }
}

OMatchPathItem BothPathItem():
{ OIdentifier edgeName = null; }
{

        (
            (
                <MINUS>
                [edgeName = Identifier()]
                <MINUS>
            )
            |
            <DECR>
        )
        jjtThis.filter = MatchFilter()

    {
     if(edgeName==null){
        edgeName = new OIdentifier(-1);
        edgeName.value = "E";
     }
     jjtThis.method = new OMethodCall(-1);
     jjtThis.method.methodName = new OIdentifier(-1);
     jjtThis.method.methodName.value = "both";
     OExpression exp = new OExpression(-1);
     exp.value = edgeName.value;
     jjtThis.method.params.add(exp);
     return jjtThis;
    }
}


OMatchPathItem OutPathItemOpt():
{ OIdentifier edgeName = null; }
{

        (
            (
                <MINUS>
                [edgeName = Identifier()]
                <MINUS>
            )
            |
            <DECR>
        )
        <GT>
        [jjtThis.filter = MatchFilter()]

    {
     if(edgeName==null){
        edgeName = new OIdentifier(-1);
        edgeName.value = "E";
     }
     jjtThis.method = new OMethodCall(-1);
     jjtThis.method.methodName = new OIdentifier(-1);
     jjtThis.method.methodName.value = "out";
     OExpression exp = new OExpression(-1);
     exp.value = edgeName.value;
     jjtThis.method.params.add(exp);
     return jjtThis;
    }
}

OMatchPathItem InPathItemOpt():
{ OIdentifier edgeName = null; }
{

        <LT>
        (
            (
                <MINUS>
                [edgeName = Identifier()]
                <MINUS>
            )
            |
            <DECR>
        )
        [jjtThis.filter = MatchFilter()]

    {
     if(edgeName==null){
        edgeName = new OIdentifier(-1);
        edgeName.value = "E";
     }
     jjtThis.method = new OMethodCall(-1);
     jjtThis.method.methodName = new OIdentifier(-1);
     jjtThis.method.methodName.value = "in";
     OExpression exp = new OExpression(-1);
     exp.value = edgeName.value;
     jjtThis.method.params.add(exp);
     return jjtThis;
    }
}

OMatchPathItem BothPathItemOpt():
{ OIdentifier edgeName = null; }
{

        (
            (
                <MINUS>
                [edgeName = Identifier()]
                <MINUS>
            )
            |
            <DECR>
        )
        [jjtThis.filter = MatchFilter()]

    {
     if(edgeName==null){
        edgeName = new OIdentifier(-1);
        edgeName.value = "E";
     }
     jjtThis.method = new OMethodCall(-1);
     jjtThis.method.methodName = new OIdentifier(-1);
     jjtThis.method.methodName.value = "both";
     OExpression exp = new OExpression(-1);
     exp.value = edgeName.value;
     jjtThis.method.params.add(exp);
     return jjtThis;
    }
}

OProfileStorageStatement ProfileStorageStatement():
{}
{
	<PROFILE> <STORAGE>
	(
		<ON> {jjtThis.on = true;}
		|
		<OFF> {jjtThis.on = false;}
	)
	{return jjtThis;}
}

OTruncateClassStatement TruncateClassStatement():
{}
{
	<TRUNCATE> <CLASS>
	jjtThis.className = Identifier()
	[ <POLYMORPHIC> {jjtThis.polymorphic = true;} ]
	[ <UNSAFE> {jjtThis.unsafe = true;} ]
	{ return jjtThis; }
}

OTruncateClusterStatement TruncateClusterStatement():
{}
{
	<TRUNCATE> <CLUSTER>
	(
		jjtThis.clusterName = Identifier()
		|
		jjtThis.clusterNumber = Integer()
	)
	[ <UNSAFE> {jjtThis.unsafe = true;} ]
	{ return jjtThis; }
}

OTruncateRecordStatement TruncateRecordStatement():
{ ORid lastRecord; }
{
	<TRUNCATE> <RECORD>
	(
		jjtThis.record = Rid()
		|
		(
			<LBRACKET> { jjtThis.records = new ArrayList<ORid>(); }
			[
				lastRecord = Rid() { jjtThis.records.add(lastRecord); }
				(
					<COMMA>
					lastRecord = Rid() { jjtThis.records.add(lastRecord); }
				)*
			]
			<RBRACKET>
		)
	)
	{ return jjtThis; }
}


OFindReferencesStatement FindReferencesStatement():
{ SimpleNode lastTarget; }
{
    <FIND> <REFERENCES>
    (
        jjtThis.rid = Rid()
        |
        (
            <LPAREN>
            jjtThis.subQuery = StatementInternal()
            <RPAREN>
        )
    )
    [
    	<LBRACKET> { jjtThis.targets = new ArrayList<SimpleNode>(); }
    	(
    	    LOOKAHEAD(IndexIdentifier())
    		lastTarget = IndexIdentifier()
            |
    		lastTarget = Identifier()
    	){ jjtThis.targets.add(lastTarget); }
    	(
    		<COMMA>
    		(
				lastTarget = Identifier()
				|
				lastTarget = Cluster()
			){ jjtThis.targets.add(lastTarget); }
    	)*
    	<RBRACKET>
    ]
    { return jjtThis; }
}

OCreateClassStatement CreateClassStatement():
{
	OIdentifier lastIdentifier;
	OInteger lastInteger;
}
{
	<CREATE> <CLASS>
	(
		jjtThis.name = Identifier()
		[
			<EXTENDS> lastIdentifier = Identifier() { jjtThis.superclasses = new ArrayList<OIdentifier>(); jjtThis.superclasses.add(lastIdentifier); }
			 (
			 	<COMMA>
			 	lastIdentifier = Identifier() { jjtThis.superclasses.add(lastIdentifier); }
			 )*
		]
		[
			<CLUSTER> lastInteger = Integer() { jjtThis.clusters = new ArrayList<OInteger>(); jjtThis.clusters.add(lastInteger); }
		 	(
				<COMMA>
				lastInteger = Integer() { jjtThis.clusters.add(lastInteger); }
		 	)*
		]
		[ <CLUSTERS> jjtThis.totalClusterNo = Integer() ]
		[ <ABSTRACT> { jjtThis.abstractClass = true; } ]
	)
	{ return jjtThis; }
}

OAlterClassStatement AlterClassStatement():
{
	OIdentifier lastIdentifier;
	OInteger lastInteger;
	Token lastToken;
}
{
	<ALTER> <CLASS>
	jjtThis.name = Identifier()
	(

		(
			<NAME> { jjtThis.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.NAME; }
			jjtThis.identifierValue = Identifier()
		)
		|
		(
			<SHORTNAME> { jjtThis.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.SHORTNAME; }
			(
				jjtThis.identifierValue = Identifier()
				|
            	<NULL>
            )
		)
		|
		(
			<SUPERCLASS> { jjtThis.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.SUPERCLASS; }
			[
				(
					<PLUS> {jjtThis.add = true;}
				)
				|
				(
					<MINUS> {jjtThis.remove = true;}
				)
			]
			(
				jjtThis.identifierValue = Identifier()
				|
				<NULL> { jjtThis.identifierValue = null; }
			)
		)
		|
		(
			<SUPERCLASSES> {
				jjtThis.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.SUPERCLASSES;
				jjtThis.identifierListValue = new ArrayList<OIdentifier>();
			}
			(
				(
					lastIdentifier = Identifier() { jjtThis.identifierListValue.add(lastIdentifier); }
					(
						<COMMA>
						lastIdentifier = Identifier() { jjtThis.identifierListValue.add(lastIdentifier); }
					)*
				)
				|
				<NULL> { jjtThis.identifierListValue = null; }
			)
		)
		|
		(
			<OVERSIZE> { jjtThis.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.OVERSIZE; }
			jjtThis.numberValue = Number()
		)
		|
		(
			<STRICTMODE> { jjtThis.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.STRICTMODE; }
			(
				(
					<TRUE> { jjtThis.booleanValue = true; }
				)
				|
				(
					<FALSE> { jjtThis.booleanValue = false; }
				)
			)
		)
		|
		(
			<ADDCLUSTER> { jjtThis.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.ADDCLUSTER; }
			(
				jjtThis.identifierValue = Identifier()
				|
				jjtThis.numberValue = Integer()
			)
		)
		|
		(
			<REMOVECLUSTER> { jjtThis.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.REMOVECLUSTER; }
			(
				jjtThis.identifierValue = Identifier()
				|
				jjtThis.numberValue = Integer()
			)
		)
		|
		(
			<CUSTOM> { jjtThis.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.CUSTOM; }
			jjtThis.customKey = Identifier()
			<EQ>
			jjtThis.customValue = Expression()
		)
		|
		(
			<ABSTRACT> { jjtThis.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.ABSTRACT; }
			(
				(
					<TRUE> { jjtThis.booleanValue = true; }
				)
				|
				(
					<FALSE> { jjtThis.booleanValue = false; }
				)
			)
		)
		|
		(
			<CLUSTERSELECTION> { jjtThis.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.CLUSTERSELECTION; }
			(
				jjtThis.identifierValue = Identifier()
				|
				"round-robin" { jjtThis.customString = "round-robin"; }
				|
				lastToken = <STRING_LITERAL> {  jjtThis.customString = token.image.substring(1, token.image.length() - 1); }
			)
		)
		|
		(
			<DESCRIPTION> { jjtThis.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.DESCRIPTION; }
			(
				jjtThis.identifierValue = Identifier()
				|
            	<NULL>
            )
		)
		|
		(
			<ENCRYPTION> { jjtThis.property = com.orientechnologies.orient.core.metadata.schema.OClass.ATTRIBUTES.ENCRYPTION; }
			(
				jjtThis.identifierValue = Identifier()
				|
				<NULL>
			)
		)
	)
	[ <UNSAFE> { jjtThis.unsafe = true; } ]
	{ return jjtThis; }
}


ODropClassStatement DropClassStatement():
{}
{
	<DROP> <CLASS>
	jjtThis.name = Identifier()
	[ <UNSAFE> { jjtThis.unsafe = true; } ]
	{ return jjtThis; }
}

OCreatePropertyStatement CreatePropertyStatement():
{}
{
	<CREATE> <PROPERTY>
	(
		jjtThis.className = Identifier()
		<DOT>
		jjtThis.propertyName = Identifier()
		jjtThis.propertyType = Identifier()
		[
			jjtThis.linkedType = Identifier()
		]
		[ <UNSAFE> { jjtThis.unsafe = true; } ]
	)
	{ return jjtThis; }
}

OAlterPropertyStatement AlterPropertyStatement():
{}
{
	<ALTER> <PROPERTY>
	(
		jjtThis.className = Identifier()
		<DOT>
		jjtThis.propertyName = Identifier()
		(
		    LOOKAHEAD(3)
		    (
		        <CUSTOM>
		        jjtThis.customPropertyName = Identifier()
		        <EQ>
		        jjtThis.customPropertyValue = Expression()
		    )
            |
		    (
                jjtThis.settingName = Identifier()
		        jjtThis.settingValue = Expression()
		    )
		)
	)
	{ return jjtThis; }
}

ODropPropertyStatement DropPropertyStatement():
{}
{
	<DROP> <PROPERTY>
	jjtThis.className = Identifier()
	<DOT>
	jjtThis.propertyName = Identifier()
	[ <FORCE> { jjtThis.force = true; }]
	{ return jjtThis; }
}

OCreateIndexStatement CreateIndexStatement():
{
    OCreateIndexStatement.Property lastProperty;
    OIdentifier lastIdentifier;
    ORecordAttribute lastRecordAttr;
}
{
	<CREATE> <INDEX>

	jjtThis.name = IndexName()
    (
        LOOKAHEAD(3)
        (
            <ON>
            jjtThis.className = Identifier()
            <LPAREN>
            (
                lastIdentifier = Identifier() {
                    lastProperty = new OCreateIndexStatement.Property();
                    lastProperty.name = lastIdentifier;
                    jjtThis.propertyList.add(lastProperty);
                }
                |
                lastRecordAttr = RecordAttribute() {
                    lastProperty = new OCreateIndexStatement.Property();
                    lastProperty.recordAttribute = lastRecordAttr;
                    jjtThis.propertyList.add(lastProperty);
                }
            )
            [
                <BY>
                (
                    <KEY> { lastProperty.byKey = true; }
                    |
                    <VALUE> { lastProperty.byValue = true; }
                )
            ]
            [
                <COLLATE>
                lastProperty.collate = Identifier()
            ]
            (
                <COMMA>
                (
                    lastIdentifier = Identifier() {
                        lastProperty = new OCreateIndexStatement.Property();
                        lastProperty.name = lastIdentifier;
                        jjtThis.propertyList.add(lastProperty);
                    }
                    |
                    lastRecordAttr = RecordAttribute() {
                        lastProperty = new OCreateIndexStatement.Property();
                        lastProperty.recordAttribute = lastRecordAttr;
                        jjtThis.propertyList.add(lastProperty);
                    }
                )
                [
                    <BY>
                    (
                        <KEY> { lastProperty.byKey = true; }
                        |
                        <VALUE> { lastProperty.byValue = true; }
                    )
                ]
                [
                    <COLLATE>
                    lastProperty.collate = Identifier()
                ]
            )*
            <RPAREN>


            jjtThis.type = Identifier()
        )
        |
        jjtThis.type = Identifier()
    )

    (
        LOOKAHEAD(2)
        (
            <ENGINE> jjtThis.engine = Identifier()
            [
                LOOKAHEAD(2)
                (
                   <METADATA> jjtThis.metadata = Json()
                )
                |
                (
                    lastIdentifier = Identifier() {jjtThis.keyTypes.add(lastIdentifier);}
                    (
                        <COMMA> lastIdentifier = Identifier() {jjtThis.keyTypes.add(lastIdentifier);}
                    )*
                    [ <METADATA> jjtThis.metadata = Json() ]
                )
            ]
        )
        |
        (
            [
                LOOKAHEAD(2)
                (
                   <METADATA> jjtThis.metadata = Json()
                )
                |
                (
                    lastIdentifier = Identifier() {jjtThis.keyTypes.add(lastIdentifier);}
                    (
                        <COMMA> lastIdentifier = Identifier() {jjtThis.keyTypes.add(lastIdentifier);}
                    )*
                    [ <METADATA> jjtThis.metadata = Json() ]
                )
            ]
        )
    )

	{ return jjtThis; }
}

ORebuildIndexStatement RebuildIndexStatement():
{}
{
    (
        <REBUILD> <INDEX>
        (
            jjtThis.name = IndexName()
            |
            <STAR> { jjtThis.all = true; }
        )
	)
	{ return jjtThis; }
}

ODropIndexStatement DropIndexStatement():
{}
{
    (
        <DROP> <INDEX>
        (
            jjtThis.name = IndexName()
            |
            <STAR> { jjtThis.all = true; }
        )
	)
	{ return jjtThis; }
}


OCreateClusterStatement CreateClusterStatement():
{}
{
    (
        <CREATE>
        (
            ( <CLUSTER> )
            |
            ( <BLOB> <CLUSTER> { jjtThis.blob = true; } )
        )
        jjtThis.name = Identifier()
        [ <ID> jjtThis.id = Integer() ]
	)
	{ return jjtThis; }
}

OAlterClusterStatement AlterClusterStatement():
{}
{
	<ALTER> <CLUSTER>
	(
		jjtThis.name = Identifier()
	)
	[ <STAR> { jjtThis.starred = true; }]
	jjtThis.attributeName = Identifier()
	jjtThis.attributeValue = Expression()
	{ return jjtThis; }
}

ODropClusterStatement DropClusterStatement():
{}
{
	<DROP> <CLUSTER>
	(
		jjtThis.name = Identifier()
		|
		jjtThis.id = Integer()
	)
	{ return jjtThis; }
}

OAlterDatabaseStatement AlterDatabaseStatement():
{}
{
	<ALTER> <DATABASE>
    (
        LOOKAHEAD(3)
        (
            <CUSTOM>
            jjtThis.customPropertyName = Identifier()
            <EQ>
            jjtThis.customPropertyValue = Expression()
        )
        |
        (
            jjtThis.settingName = Identifier()
            jjtThis.settingValue = Expression()
        )
    )
	{ return jjtThis; }
}

OCommandLineOption CommandLineOption():
{}
{
    (
        <MINUS> jjtThis.name = Identifier()
    )
    {return jjtThis;}
}

OOptimizeDatabaseStatement OptimizeDatabaseStatement():
{ OCommandLineOption lastOption; }
{
    (
        <OPTIMIZE> <DATABASE>
        (
            lastOption = CommandLineOption() { jjtThis.options.add(lastOption); }
        )*
    )
    {return jjtThis;}
}

OCreateLinkStatement CreateLinkStatement():
{  }
{
    (
        <CREATE> <LINK>
        jjtThis.name = Identifier()
        <TYPE>
        jjtThis.type = Identifier()
        <FROM>
        jjtThis.sourceClass = Identifier()
        <DOT>
        (
            jjtThis.sourceField = Identifier()
            |
            jjtThis.sourceRecordAttr = RecordAttribute()
        )
        <TO>
        jjtThis.destClass = Identifier()
        <DOT>
        (
            jjtThis.destField = Identifier()
            |
            jjtThis.destRecordAttr = RecordAttribute()
        )
        [ <INVERSE> { jjtThis.inverse = true; } ]
    )
    {return jjtThis;}
}

OExplainStatement ExplainStatement():
{}
{
    (
        <EXPLAIN>
        jjtThis.statement = StatementInternal()
    )
    { return jjtThis; }
}

OPermission Permission():
{}
{
    (
        <CREATE> { jjtThis.permission = "CREATE"; }
        |
        <READ> { jjtThis.permission = "READ"; }
        |
        <UPDATE> { jjtThis.permission = "UPDATE"; }
        |
        <DELETE> { jjtThis.permission = "DELETE"; }
        |
        <EXECUTE> { jjtThis.permission = "EXECUTE"; }
        |
        <ALL> { jjtThis.permission = "ALL"; }
        |
        <NONE> { jjtThis.permission = "NONE"; }
    )
    {return jjtThis;}
}

OResourcePathItem ResourcePathItem():
{}
{
    (
        <CLUSTER> { jjtThis.name = "cluster"; }
        |
        <STAR> { jjtThis.star = true; }
        |
        jjtThis.identifier = Identifier()
    )
    {return jjtThis;}
}

OGrantStatement GrantStatement():
{
    OResourcePathItem lastItem;
}
{
    (
        <GRANT>
        jjtThis.permission = Permission()
        <ON>
        lastItem = ResourcePathItem() { jjtThis.resourceChain.add(lastItem); }
        (
            <DOT>
            lastItem = ResourcePathItem() { jjtThis.resourceChain.add(lastItem); }
        )*
        <TO>
        jjtThis.actor = Identifier()
    )
    { return jjtThis; }
}

ORevokeStatement RevokeStatement():
{
    OResourcePathItem lastItem;
}
{
    (
        <REVOKE>
        jjtThis.permission = Permission()
        <ON>
        lastItem = ResourcePathItem() { jjtThis.resourceChain.add(lastItem); }
        (
            <DOT>
            lastItem = ResourcePathItem() { jjtThis.resourceChain.add(lastItem); }
        )*
        <FROM>
        jjtThis.actor = Identifier()
    )
    { return jjtThis; }
}

OCreateFunctionStatement CreateFunctionStatement():
{
    Token token;
    OIdentifier lastIdentifier;
}
{
    (
        <CREATE> <FUNCTION>
        jjtThis.name = Identifier()
        token = <STRING_LITERAL> {
            jjtThis.codeQuoted = token.image;
            jjtThis.code = token.image.substring(1, token.image.length() -1);
        }
        [
            <PARAMETERS>
            <LBRACKET>
            lastIdentifier = Identifier() {
                jjtThis.parameters = new ArrayList<OIdentifier>();
                jjtThis.parameters.add(lastIdentifier);
            }
            (
                <COMMA>
                lastIdentifier = Identifier() { jjtThis.parameters.add(lastIdentifier); }
            )*
            <RBRACKET>
        ]
        [
            <IDEMPOTENT>
            (
                <TRUE> { jjtThis.idempotent = true; }
                |
                <FALSE> { jjtThis.idempotent = false; }
            )
        ]
        [
            <LANGUAGE>
            jjtThis.language = Identifier()
        ]
    )
    { return jjtThis; }
}


OLetStatement LetStatement():
{ }
{
    (
        <LET>
        jjtThis.name = Identifier()
        <EQ>
        (
            LOOKAHEAD(Statement())
            jjtThis.statement =  StatementInternal()
            |
            LOOKAHEAD(Expression())
            jjtThis.expression = Expression()
        )
    )
    {return jjtThis;}
}

OBeginStatement BeginStatement():
{ }
{
    (
        <BEGIN>
        [ <ISOLATION> jjtThis.isolation = Identifier() ]
    )
    {return jjtThis;}
}

OCommitStatement CommitStatement():
{ }
{
    (
        <COMMIT>
        [
            <RETRY>
            jjtThis.retry = Integer()
        ]
    )
    {return jjtThis;}
}

OReturnStatement ReturnStatement():
{ }
{
    (
        <RETURN>
        [
            jjtThis.expression = Expression()
        ]
    )
    {return jjtThis;}
}

OIfStatement IfStatement():
{ OStatement last; }
{
    (
        <IF><LPAREN>
        jjtThis.expression = OrBlock()
        <RPAREN><LBRACE>
        (
            LOOKAHEAD(StatementSemicolon())
            last = StatementSemicolon() { jjtThis.statements.add(last); }
            |
            last = IfStatement() { jjtThis.statements.add(last); }
            |
            <SEMICOLON>
        )*
        <RBRACE>
    )
    { return jjtThis; }
}

OSleepStatement SleepStatement():
{ }
{
    (
        <SLEEP> jjtThis.millis = Integer()
    )
    { return jjtThis; }
}

OConsoleStatement ConsoleStatement():
{ }
{
    (
        <CONSOLE> <DOT>
        jjtThis.logLevel = Identifier()
        jjtThis.message = Expression()
    )
    { return jjtThis; }
}


OCreateSequenceStatement CreateSequenceStatement():
{
 OIdentifier lastIdentifier;
}
{
    (
        <CREATE> <SEQUENCE>
        jjtThis.name = Identifier()
        <TYPE>
        lastIdentifier = Identifier(){
            if(lastIdentifier.getStringValue().equalsIgnoreCase("cached")){
                jjtThis.type = OCreateSequenceStatement.TYPE_CACHED;
            }else if(lastIdentifier.getStringValue().equalsIgnoreCase("ordered")){
                jjtThis.type = OCreateSequenceStatement.TYPE_ORDERED;
            }else{
                throw new ParseException();
            }
        }

        [ <START> jjtThis.start = Expression() ]
        [ <INCREMENT> jjtThis.start = Expression() ]
        [ <CACHE> jjtThis.start = Expression() ]
    )
    { return jjtThis; }
}

OAlterSequenceStatement AlterSequenceStatement():
{
 OIdentifier lastIdentifier;
}
{
    (
        <ALTER> <SEQUENCE>
        jjtThis.name = Identifier()
        [ <START> jjtThis.start = Expression() ]
        [ <INCREMENT> jjtThis.start = Expression() ]
        [ <CACHE> jjtThis.start = Expression() ]
    )
    { return jjtThis; }
}


ODropSequenceStatement DropSequenceStatement():
{
 OIdentifier lastIdentifier;
}
{
    (
        <DROP> <SEQUENCE>
        jjtThis.name = Identifier()
    )
    { return jjtThis; }
}
