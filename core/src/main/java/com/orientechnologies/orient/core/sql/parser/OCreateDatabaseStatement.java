/* Generated By:JJTree: Do not edit this line. OCreateDatabaseStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.orientechnologies.orient.core.sql.parser;

import com.orientechnologies.orient.core.command.OServerCommandContext;
import com.orientechnologies.orient.core.config.OGlobalConfiguration;
import com.orientechnologies.orient.core.db.*;
import com.orientechnologies.orient.core.exception.OCommandExecutionException;
import com.orientechnologies.orient.core.sql.executor.OInternalResultSet;
import com.orientechnologies.orient.core.sql.executor.OResultInternal;
import com.orientechnologies.orient.core.sql.executor.OResultSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Map;

public class OCreateDatabaseStatement extends OSimpleExecServerStatement {

  protected OIdentifier name;
  protected OIdentifier type;
  protected boolean ifNotExists = false;
  protected OJson config;

  List<ODatabaseUserData> users = new ArrayList<>();

  public OCreateDatabaseStatement(int id) {
    super(id);
  }

  public OCreateDatabaseStatement(OrientSql p, int id) {
    super(p, id);
  }

  @Override
  public OResultSet executeSimple(OServerCommandContext ctx) {
    OrientDBInternal server = ctx.getServer();
    OResultInternal result = new OResultInternal();
    result.setProperty("operation", "create database");
    result.setProperty("name", name.getStringValue());

    ODatabaseType dbType;
    try {

      dbType = ODatabaseType.valueOf(type.getStringValue().toUpperCase(Locale.ENGLISH));
    } catch (IllegalArgumentException ex) {
      throw new OCommandExecutionException("Invalid db type: " + type.getStringValue());
    }
    if (ifNotExists && server.exists(name.getStringValue(), null, null)) {
      result.setProperty("created", false);
      result.setProperty("existing", true);
    } else {
      try {
        if (config == null) {
          server.create(name.getStringValue(), null, null, dbType);
        } else {
          server.create(name.getStringValue(), null, null, dbType, toOrientDBConfig(config, ctx));
        }
        result.setProperty("created", true);
      } catch (Exception e) {
        throw new OCommandExecutionException(
            "Could not create database " + type.getStringValue() + ":" + e.getMessage());
      }
    }
    // TODO create users!
    if (!users.isEmpty()) {
      try (ODatabaseDocumentInternal db = server.openNoAuthorization(name.getStringValue())) {
        for (ODatabaseUserData user : users) {
          user.executeCreate(db, ctx);
        }
      }
    }

    OInternalResultSet rs = new OInternalResultSet();
    rs.add(result);
    return rs;
  }

  private OrientDBConfig toOrientDBConfig(OJson config, OServerCommandContext ctx) {
    OrientDBConfigBuilder builder = new OrientDBConfigBuilder();
    Map<String, Object> configMap = config.toMap(new OResultInternal(), ctx);
    Object globalConfig = configMap.get("config");
    if (globalConfig != null && globalConfig instanceof Map) {
      ((Map<String, Object>) globalConfig)
          .entrySet().stream()
              .filter(x -> OGlobalConfiguration.findByKey(x.getKey()) != null)
              .forEach(
                  x -> builder.addConfig(OGlobalConfiguration.findByKey(x.getKey()), x.getValue()));
    }
    return builder.build();
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("CREATE DATABASE ");
    name.toString(params, builder);
    builder.append(" ");
    type.toString(params, builder);
    if (ifNotExists) {
      builder.append(" IF NOT EXISTS");
    }

    if (!users.isEmpty()) {
      builder.append(" USERS (");
      boolean first = true;
      for (ODatabaseUserData user : users) {
        if (!first) {
          builder.append(", ");
        }
        user.toString(params, builder);
        first = false;
      }
      builder.append(")");
    }
    if (config != null) {
      builder.append(" ");
      config.toString(params, builder);
    }
  }

  /** Accept the visitor. */
  public Object jjtAccept(OrientSqlVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
}
/* JavaCC - OriginalChecksum=99888a0f8bb929dce0904816cd51fefe (do not edit this line) */
