/* Generated By:JJTree: Do not edit this line. OBaseExpression.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.orientechnologies.orient.core.sql.parser;

import java.util.Map;

public class OBaseExpression extends OMathExpression {

  private static final Object UNSET           = new Object();
  private Object              inputFinalValue = UNSET;

  protected ONumber           number;

  protected OBaseIdentifier   identifier;

  protected OInputParameter   inputParam;

  protected String            string;

  OModifier                   modifier;

  public OBaseExpression(int id) {
    super(id);
  }

  public OBaseExpression(OrientSql p, int id) {
    super(p, id);
  }

  /** Accept the visitor. **/
  public Object jjtAccept(OrientSqlVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  @Override
  public String toString() {
    StringBuilder result = new StringBuilder();
    if (number != null) {
      result.append(number.toString());
    } else if (identifier != null) {
      result.append(identifier.toString());
    } else if (string != null) {
      result.append(string);
    } else if (inputParam != null) {
      if (inputFinalValue == UNSET) {
        result.append(inputParam.toString());
      } else if (inputFinalValue == null) {
        result.append("NULL");
      } else {
        if (inputFinalValue instanceof String) {
          result.append("\"");
          result.append(OExpression.encode(inputFinalValue.toString()));
          result.append("\"");
        } else {
          result.append(inputFinalValue.toString());
        }
      }
    }

    if (modifier != null) {
      result.append(modifier.toString());
    }
    return result.toString();
  }

  public void replaceParameters(Map<Object, Object> params) {
    if (identifier != null) {
      identifier.replaceParameters(params);
    }
    if (inputParam != null) {
      Object result = inputParam.bindFromInputParams(params);
      if (inputParam != result) {
        inputFinalValue = result;
      }
    }
    if (modifier != null) {
      modifier.replaceParameters(params);
    }
  }

  @Override protected boolean supportsBasicCalculation() {
    return true;
  }
}
/* JavaCC - OriginalChecksum=71b3e2d1b65c923dc7cfe11f9f449d2b (do not edit this line) */
