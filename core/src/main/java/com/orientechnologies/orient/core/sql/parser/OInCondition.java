/* Generated By:JJTree: Do not edit this line. OInCondition.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.orientechnologies.orient.core.sql.parser;

import com.orientechnologies.orient.core.db.record.OIdentifiable;

import java.util.Collection;
import java.util.Map;

public class OInCondition extends OBooleanExpression {
  protected OExpression            left;
  protected OBinaryCompareOperator operator;
  protected OSelectStatement       rightStatement;
  protected Collection<Object>     rightCollection;
  protected OInputParameter        rightParam;
  protected Object                 right;

  private static final Object      UNSET           = new Object();
  private Object                   inputFinalValue = UNSET;

  public OInCondition(int id) {
    super(id);
  }

  public OInCondition(OrientSql p, int id) {
    super(p, id);
  }

  /** Accept the visitor. **/
  public Object jjtAccept(OrientSqlVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  @Override
  public boolean evaluate(OIdentifiable currentRecord) {
    return false;
  }

  @Override
  public void replaceParameters(Map<Object, Object> params) {
    left.replaceParameters(params);
    if (rightStatement != null) {
      rightStatement.replaceParameters(params);
    }
    if (rightCollection != null) {
      for (Object o : rightCollection) {
        if (o instanceof OExpression) {
          ((OExpression) o).replaceParameters(params);
        }
      }
    }
    if (rightParam != null) {
      Object result = rightParam.bindFromInputParams(params);
      if (rightParam != result) {
        inputFinalValue = result;
      }
    }
  }

  public String toString() {
    StringBuilder result = new StringBuilder();
    result.append(left.toString());
    result.append(" IN ");
    if (rightStatement != null) {
      result.append("(");
      result.append(rightStatement.toString());
      result.append(")");
    } else if (rightCollection != null) {
      result.append("[");
      boolean first = true;
      for (Object o : rightCollection) {
        if (!first) {
          result.append(", ");
        }
        result.append(convertToString(o));
        first = false;
      }
      result.append("]");
    } else if (right != null) {
      result.append(convertToString(right));
    } else if (rightParam != null) {
      if (inputFinalValue == UNSET) {
        result.append( rightParam.toString());
      } else if (inputFinalValue == null) {
        result.append("NULL");
      } else {
        result.append(inputFinalValue.toString());
      }
    }
    return result.toString();
  }

  private String convertToString(Object o) {
    if (o instanceof String) {
      return "\"" + ((String) o).replaceAll("\"", "\\\"") + "\"";
    }
    return o.toString();
  }
}
/* JavaCC - OriginalChecksum=00df7cb1877c0a12d24205c1700653c7 (do not edit this line) */
