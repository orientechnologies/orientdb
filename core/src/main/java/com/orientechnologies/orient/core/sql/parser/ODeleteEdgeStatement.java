/* Generated By:JJTree: Do not edit this line. ODeleteEdgeStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.orientechnologies.orient.core.sql.parser;

import java.util.List;
import java.util.Map;

public class ODeleteEdgeStatement extends OStatement {
  private static final Object unset           = new Object();

  protected OIdentifier       className;
  protected OIdentifier       targetClusterName;

  protected ORid              rid;
  protected List<ORid>        rids;

  protected ORid              leftRid;
  protected List<ORid>        leftRids;
  protected OSelectStatement  leftStatement;
  protected OInputParameter   leftParam;
  protected Object            leftParamValue  = unset;
  protected OIdentifier       leftIdentifier;

  protected ORid              rightRid;
  protected List<ORid>        rightRids;
  protected OSelectStatement  rightStatement;
  protected OInputParameter   rightParam;
  protected Object            rightParamValue = unset;
  protected OIdentifier       rightIdentifier;

  protected OWhereClause      whereClause;

  protected OLimit            limit;
  protected OBatch            batch        = null;

  public ODeleteEdgeStatement(int id) {
    super(id);
  }

  public ODeleteEdgeStatement(OrientSql p, int id) {
    super(p, id);
  }

  /** Accept the visitor. **/
  public Object jjtAccept(OrientSqlVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("DELETE EDGE");

    if (className != null) {
      builder.append(" ");
      className.toString(params, builder);
      if (targetClusterName != null) {
        builder.append(" CLUSTER ");
        targetClusterName.toString(params, builder);
      }
    }

    if (rid != null) {
      builder.append(" ");
      rid.toString(params, builder);
    }
    if (rids != null) {
      builder.append(" [");
      boolean first = true;
      for (ORid rid : rids) {
        if (!first) {
          builder.append(", ");
        }
        rid.toString(params, builder);
        first = false;
      }
      builder.append("]");
    }

    if (leftRid != null || leftRids != null || leftStatement != null || leftParam != null || leftIdentifier != null) {
      builder.append(" FROM ");
      if (leftRid != null) {
        leftRid.toString(params, builder);
      } else if (leftRids != null) {
        builder.append("[");
        boolean first = true;
        for (ORid rid : leftRids) {
          if (!first) {
            builder.append(", ");
          }
          rid.toString(params, builder);
          first = false;
        }
        builder.append("]");
      } else if (leftStatement != null) {
        builder.append("(");
        leftStatement.toString(params, builder);
        builder.append(")");
      } else if (leftParam != null) {
        leftParam.toString(params, builder);
      } else if (leftIdentifier != null) {
        leftIdentifier.toString(params, builder);
      }

    }
    if (rightRid != null || rightRids != null || rightStatement != null || rightParam != null || rightIdentifier != null) {
      builder.append(" TO ");
      if (rightRid != null) {
        rightRid.toString(params, builder);
      } else if (rightRids != null) {
        builder.append("[");
        boolean first = true;
        for (ORid rid : rightRids) {
          if (!first) {
            builder.append(", ");
          }
          rid.toString(params, builder);
          first = false;
        }
        builder.append("]");
      } else if (rightStatement != null) {
        builder.append("(");
        rightStatement.toString(params, builder);
        builder.append(")");
      } else if (rightParam != null) {
        rightParam.toString(params, builder);
      } else if (rightIdentifier != null) {
        rightIdentifier.toString(params, builder);
      }
    }

    if (whereClause != null) {
      builder.append(" WHERE ");
      whereClause.toString(params, builder);
    }

    if (limit != null) {
      limit.toString(params, builder);
    }
    if (batch != null) {
      batch.toString(params, builder);
    }
  }

}
/* JavaCC - OriginalChecksum=8f4c5bafa99572d7d87a5d0a2c7d55a7 (do not edit this line) */
