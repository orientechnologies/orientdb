/* Generated By:JJTree: Do not edit this line. ORebuildIndexStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.orientechnologies.orient.core.sql.parser;

import com.orientechnologies.orient.core.command.OCommandContext;
import com.orientechnologies.orient.core.db.ODatabaseDocumentInternal;
import com.orientechnologies.orient.core.exception.OCommandExecutionException;
import com.orientechnologies.orient.core.index.OIndex;
import com.orientechnologies.orient.core.sql.executor.OResultInternal;
import com.orientechnologies.orient.core.sql.executor.resultset.OExecutionStream;
import java.util.Map;

public class ORebuildIndexStatement extends OSimpleExecStatement {

  protected boolean all = false;
  protected OIndexName name;

  public ORebuildIndexStatement(int id) {
    super(id);
  }

  public ORebuildIndexStatement(OrientSql p, int id) {
    super(p, id);
  }

  @Override
  public OExecutionStream executeSimple(OCommandContext ctx) {
    OResultInternal result = new OResultInternal();
    result.setProperty("operation", "rebuild index");

    final ODatabaseDocumentInternal database = getDatabase();
    if (all) {
      long totalIndexed = 0;
      for (OIndex idx : database.getMetadata().getIndexManagerInternal().getIndexes(database)) {
        if (idx.isAutomatic()) totalIndexed += idx.rebuild();
      }

      result.setProperty("totalIndexed", totalIndexed);
    } else {
      final OIndex idx =
          database.getMetadata().getIndexManagerInternal().getIndex(database, name.getValue());
      if (idx == null) throw new OCommandExecutionException("Index '" + name + "' not found");

      if (!idx.isAutomatic())
        throw new OCommandExecutionException(
            "Cannot rebuild index '"
                + name
                + "' because it's manual and there aren't indications of what to index");

      long val = idx.rebuild();
      result.setProperty("totalIndexed", val);
    }
    return OExecutionStream.singleton(result);
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("REBUILD INDEX ");
    if (all) {
      builder.append("*");
    } else {
      name.toString(params, builder);
    }
  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    builder.append("REBUILD INDEX ");
    if (all) {
      builder.append("*");
    } else {
      name.toGenericStatement(builder);
    }
  }

  @Override
  public ORebuildIndexStatement copy() {
    ORebuildIndexStatement result = new ORebuildIndexStatement(-1);
    result.all = all;
    result.name = name == null ? null : name.copy();
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;

    ORebuildIndexStatement that = (ORebuildIndexStatement) o;

    if (all != that.all) return false;
    if (name != null ? !name.equals(that.name) : that.name != null) return false;

    return true;
  }

  @Override
  public int hashCode() {
    int result = (all ? 1 : 0);
    result = 31 * result + (name != null ? name.hashCode() : 0);
    return result;
  }
}
/* JavaCC - OriginalChecksum=baca3c54112f1c08700ebdb691fa85bd (do not edit this line) */
