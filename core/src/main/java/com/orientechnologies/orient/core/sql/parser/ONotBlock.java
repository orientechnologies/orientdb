/* Generated By:JJTree: Do not edit this line. ONotBlock.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.orientechnologies.orient.core.sql.parser;

import com.orientechnologies.orient.core.command.OCommandContext;
import com.orientechnologies.orient.core.db.ODatabaseDocumentInternal;
import com.orientechnologies.orient.core.db.record.OIdentifiable;
import com.orientechnologies.orient.core.metadata.schema.OClass;
import com.orientechnologies.orient.core.sql.executor.OResult;
import com.orientechnologies.orient.core.sql.executor.metadata.OIndexCandidate;
import com.orientechnologies.orient.core.sql.executor.metadata.OIndexFinder;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

public class ONotBlock extends OBooleanExpression {
  protected OBooleanExpression sub;

  protected boolean negate = false;

  public ONotBlock(int id) {
    super(id);
  }

  public ONotBlock(OrientSql p, int id) {
    super(p, id);
  }

  @Override
  public boolean evaluate(OIdentifiable currentRecord, OCommandContext ctx) {
    if (sub == null) {
      return true;
    }
    boolean result = sub.evaluate(currentRecord, ctx);
    if (negate) {
      return !result;
    }
    return result;
  }

  @Override
  public boolean evaluate(OResult currentRecord, OCommandContext ctx) {
    if (sub == null) {
      return true;
    }
    boolean result = sub.evaluate(currentRecord, ctx);
    if (negate) {
      return !result;
    }
    return result;
  }

  public OBooleanExpression getSub() {
    return sub;
  }

  public void setSub(OBooleanExpression sub) {
    this.sub = sub;
  }

  public boolean isNegate() {
    return negate;
  }

  public void setNegate(boolean negate) {
    this.negate = negate;
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    if (negate) {
      builder.append("NOT ");
    }
    sub.toString(params, builder);
  }

  public void toGenericStatement(StringBuilder builder) {
    if (negate) {
      builder.append("NOT ");
    }
    sub.toGenericStatement(builder);
  }

  @Override
  public boolean supportsBasicCalculation() {
    return true;
  }

  @Override
  protected int getNumberOfExternalCalculations() {
    return sub.getNumberOfExternalCalculations();
  }

  @Override
  protected List<Object> getExternalCalculationConditions() {
    return sub.getExternalCalculationConditions();
  }

  public List<OBinaryCondition> getIndexedFunctionConditions(
      OClass iSchemaClass, ODatabaseDocumentInternal database) {
    if (sub == null) {
      return null;
    }
    if (negate) {
      return null;
    }
    return sub.getIndexedFunctionConditions(iSchemaClass, database);
  }

  @Override
  public List<OAndBlock> flatten() {
    if (!negate) {
      return sub.flatten();
    }
    return super.flatten();
  }

  @Override
  public boolean needsAliases(Set<String> aliases) {
    return sub.needsAliases(aliases);
  }

  @Override
  public ONotBlock copy() {
    ONotBlock result = new ONotBlock(-1);
    result.sub = sub.copy();
    result.negate = negate;
    return result;
  }

  @Override
  public void extractSubQueries(SubQueryCollector collector) {
    sub.extractSubQueries(collector);
  }

  @Override
  public boolean refersToParent() {
    return sub.refersToParent();
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;

    ONotBlock oNotBlock = (ONotBlock) o;

    if (negate != oNotBlock.negate) return false;
    if (sub != null ? !sub.equals(oNotBlock.sub) : oNotBlock.sub != null) return false;

    return true;
  }

  @Override
  public int hashCode() {
    int result = sub != null ? sub.hashCode() : 0;
    result = 31 * result + (negate ? 1 : 0);
    return result;
  }

  @Override
  public List<String> getMatchPatternInvolvedAliases() {
    return sub.getMatchPatternInvolvedAliases();
  }

  @Override
  public void translateLuceneOperator() {
    sub.translateLuceneOperator();
  }

  @Override
  public boolean isCacheable() {
    return sub.isCacheable();
  }

  @Override
  public OBooleanExpression rewriteIndexChainsAsSubqueries(OCommandContext ctx, OClass clazz) {
    if (!negate) {
      sub = sub.rewriteIndexChainsAsSubqueries(ctx, clazz);
    }
    return this;
  }

  public Optional<OIndexCandidate> findIndex(OIndexFinder info, OCommandContext ctx) {
    Optional<OIndexCandidate> found = sub.findIndex(info, ctx);
    if (negate && found.isPresent()) {
      found = found.get().invert();
    }
    return found;
  }

  @Override
  public boolean isAlwaysTrue() {
    if (negate) {
      return false;
    }
    return sub.isAlwaysTrue();
  }
}
/* JavaCC - OriginalChecksum=1926313b3f854235aaa20811c22d583b (do not edit this line) */
