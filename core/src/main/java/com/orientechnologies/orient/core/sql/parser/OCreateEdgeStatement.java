/* Generated By:JJTree: Do not edit this line. OCreateEdgeStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.orientechnologies.orient.core.sql.parser;

import java.util.List;
import java.util.Map;

public class OCreateEdgeStatement extends OStatement {

  private static final Object unset           = new Object();

  protected OIdentifier       targetClass;
  protected OIdentifier       targetClusterName;

  protected ORid              leftRid;
  protected List<ORid>        leftRids;
  protected OSelectStatement  leftStatement;
  protected OInputParameter   leftParam;
  protected Object            leftParamValue  = unset;
  protected OIdentifier       leftIdentifier;

  protected ORid              rightRid;
  protected List<ORid>        rightRids;
  protected OSelectStatement  rightStatement;
  protected OInputParameter   rightParam;
  protected Object            rightParamValue = unset;
  protected OIdentifier       rightIdentifier;

  protected OInsertBody       body;
  protected Number            retry;
  protected Number            wait;
  protected OBatch            batch;

  public OCreateEdgeStatement(int id) {
    super(id);
  }

  public OCreateEdgeStatement(OrientSql p, int id) {
    super(p, id);
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("CREATE EDGE");
    if (targetClass != null) {
      builder.append(" ");
      targetClass.toString(params, builder);
      if (targetClusterName != null) {
        builder.append(" CLUSTER ");
        targetClusterName.toString(params, builder);
      }
    }
    builder.append(" FROM ");
    if (leftRid != null) {
      leftRid.toString(params, builder);
    } else if (leftRids != null) {
      builder.append("[");
      boolean first = true;
      for (ORid rid : leftRids) {
        if (!first) {
          builder.append(", ");
        }
        rid.toString(params, builder);
        first = false;
      }
      builder.append("]");
    } else if (leftStatement != null) {
      builder.append("(");
      leftStatement.toString(params, builder);
      builder.append(")");
    } else if (leftParam != null) {
      leftParam.toString(params, builder);
    } else if (leftIdentifier != null) {
      leftIdentifier.toString(params, builder);
    }
    builder.append(" TO ");
    if (rightRid != null) {
      rightRid.toString(params, builder);
    } else if (rightRids != null) {
      builder.append("[");
      boolean first = true;
      for (ORid rid : rightRids) {
        if (!first) {
          builder.append(", ");
        }
        rid.toString(params, builder);
        first = false;
      }
      builder.append("]");
    } else if (rightStatement != null) {
      builder.append("(");
      rightStatement.toString(params, builder);
      builder.append(")");
    } else if (rightParam != null) {
      rightParam.toString(params, builder);
    } else if (rightIdentifier != null) {
      rightIdentifier.toString(params, builder);
    }
    if (body != null) {
      builder.append(" ");
      body.toString(params, builder);
    }
    if (retry != null) {
      builder.append(" RETRY ");
      builder.append(retry);
    }
    if (wait != null) {
      builder.append(" WAIT ");
      builder.append(wait);
    }
    if (batch != null) {
      batch.toString(params, builder);
    }
  }

}
/* JavaCC - OriginalChecksum=2d3dc5693940ffa520146f8f7f505128 (do not edit this line) */
