/* Generated By:JJTree&JavaCC: Do not edit this line. OrientSqlConstants.java */
package com.orientechnologies.orient.core.sql.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface OrientSqlConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SELECT = 5;
  /** RegularExpression Id. */
  int TRAVERSE = 6;
  /** RegularExpression Id. */
  int INSERT = 7;
  /** RegularExpression Id. */
  int CREATE = 8;
  /** RegularExpression Id. */
  int DELETE = 9;
  /** RegularExpression Id. */
  int VERTEX = 10;
  /** RegularExpression Id. */
  int EDGE = 11;
  /** RegularExpression Id. */
  int UPDATE = 12;
  /** RegularExpression Id. */
  int UPSERT = 13;
  /** RegularExpression Id. */
  int FROM = 14;
  /** RegularExpression Id. */
  int TO = 15;
  /** RegularExpression Id. */
  int WHERE = 16;
  /** RegularExpression Id. */
  int WHILE = 17;
  /** RegularExpression Id. */
  int INTO = 18;
  /** RegularExpression Id. */
  int VALUES = 19;
  /** RegularExpression Id. */
  int SET = 20;
  /** RegularExpression Id. */
  int ADD = 21;
  /** RegularExpression Id. */
  int PUT = 22;
  /** RegularExpression Id. */
  int MERGE = 23;
  /** RegularExpression Id. */
  int CONTENT = 24;
  /** RegularExpression Id. */
  int REMOVE = 25;
  /** RegularExpression Id. */
  int INCREMENT = 26;
  /** RegularExpression Id. */
  int AND = 27;
  /** RegularExpression Id. */
  int OR = 28;
  /** RegularExpression Id. */
  int NULL = 29;
  /** RegularExpression Id. */
  int DEFINED = 30;
  /** RegularExpression Id. */
  int ORDER = 31;
  /** RegularExpression Id. */
  int GROUP = 32;
  /** RegularExpression Id. */
  int BY = 33;
  /** RegularExpression Id. */
  int LIMIT = 34;
  /** RegularExpression Id. */
  int SKIP2 = 35;
  /** RegularExpression Id. */
  int OFFSET = 36;
  /** RegularExpression Id. */
  int TIMEOUT = 37;
  /** RegularExpression Id. */
  int ASC = 38;
  /** RegularExpression Id. */
  int AS = 39;
  /** RegularExpression Id. */
  int DESC = 40;
  /** RegularExpression Id. */
  int FETCHPLAN = 41;
  /** RegularExpression Id. */
  int RETURN = 42;
  /** RegularExpression Id. */
  int BEFORE = 43;
  /** RegularExpression Id. */
  int AFTER = 44;
  /** RegularExpression Id. */
  int LOCK = 45;
  /** RegularExpression Id. */
  int RECORD = 46;
  /** RegularExpression Id. */
  int WAIT = 47;
  /** RegularExpression Id. */
  int RETRY = 48;
  /** RegularExpression Id. */
  int LET = 49;
  /** RegularExpression Id. */
  int NOCACHE = 50;
  /** RegularExpression Id. */
  int UNSAFE = 51;
  /** RegularExpression Id. */
  int PARALLEL = 52;
  /** RegularExpression Id. */
  int STRATEGY = 53;
  /** RegularExpression Id. */
  int DEPTH_FIRST = 54;
  /** RegularExpression Id. */
  int BREADTH_FIRST = 55;
  /** RegularExpression Id. */
  int LUCENE = 56;
  /** RegularExpression Id. */
  int UNWIND = 57;
  /** RegularExpression Id. */
  int THIS = 58;
  /** RegularExpression Id. */
  int RECORD_ATTRIBUTE = 59;
  /** RegularExpression Id. */
  int RID_ATTR = 60;
  /** RegularExpression Id. */
  int CLASS_ATTR = 61;
  /** RegularExpression Id. */
  int VERSION_ATTR = 62;
  /** RegularExpression Id. */
  int SIZE_ATTR = 63;
  /** RegularExpression Id. */
  int TYPE_ATTR = 64;
  /** RegularExpression Id. */
  int RAW_ATTR = 65;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 66;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 67;
  /** RegularExpression Id. */
  int HEX_LITERAL = 68;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 69;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 70;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 71;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 72;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 73;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 74;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 75;
  /** RegularExpression Id. */
  int STRING_LITERAL = 76;
  /** RegularExpression Id. */
  int INTEGER_RANGE = 77;
  /** RegularExpression Id. */
  int TRUE = 78;
  /** RegularExpression Id. */
  int FALSE = 79;
  /** RegularExpression Id. */
  int LPAREN = 80;
  /** RegularExpression Id. */
  int RPAREN = 81;
  /** RegularExpression Id. */
  int LBRACE = 82;
  /** RegularExpression Id. */
  int RBRACE = 83;
  /** RegularExpression Id. */
  int LBRACKET = 84;
  /** RegularExpression Id. */
  int RBRACKET = 85;
  /** RegularExpression Id. */
  int SEMICOLON = 86;
  /** RegularExpression Id. */
  int COMMA = 87;
  /** RegularExpression Id. */
  int DOT = 88;
  /** RegularExpression Id. */
  int AT = 89;
  /** RegularExpression Id. */
  int DOLLAR = 90;
  /** RegularExpression Id. */
  int EQ = 91;
  /** RegularExpression Id. */
  int LT = 92;
  /** RegularExpression Id. */
  int GT = 93;
  /** RegularExpression Id. */
  int BANG = 94;
  /** RegularExpression Id. */
  int TILDE = 95;
  /** RegularExpression Id. */
  int HOOK = 96;
  /** RegularExpression Id. */
  int COLON = 97;
  /** RegularExpression Id. */
  int LE = 98;
  /** RegularExpression Id. */
  int GE = 99;
  /** RegularExpression Id. */
  int NE = 100;
  /** RegularExpression Id. */
  int NEQ = 101;
  /** RegularExpression Id. */
  int SC_OR = 102;
  /** RegularExpression Id. */
  int SC_AND = 103;
  /** RegularExpression Id. */
  int INCR = 104;
  /** RegularExpression Id. */
  int DECR = 105;
  /** RegularExpression Id. */
  int PLUS = 106;
  /** RegularExpression Id. */
  int MINUS = 107;
  /** RegularExpression Id. */
  int STAR = 108;
  /** RegularExpression Id. */
  int SLASH = 109;
  /** RegularExpression Id. */
  int BIT_AND = 110;
  /** RegularExpression Id. */
  int BIT_OR = 111;
  /** RegularExpression Id. */
  int XOR = 112;
  /** RegularExpression Id. */
  int REM = 113;
  /** RegularExpression Id. */
  int LSHIFT = 114;
  /** RegularExpression Id. */
  int PLUSASSIGN = 115;
  /** RegularExpression Id. */
  int MINUSASSIGN = 116;
  /** RegularExpression Id. */
  int STARASSIGN = 117;
  /** RegularExpression Id. */
  int SLASHASSIGN = 118;
  /** RegularExpression Id. */
  int ANDASSIGN = 119;
  /** RegularExpression Id. */
  int ORASSIGN = 120;
  /** RegularExpression Id. */
  int XORASSIGN = 121;
  /** RegularExpression Id. */
  int REMASSIGN = 122;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 123;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 124;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 125;
  /** RegularExpression Id. */
  int ELLIPSIS = 126;
  /** RegularExpression Id. */
  int RANGE = 127;
  /** RegularExpression Id. */
  int NOT = 128;
  /** RegularExpression Id. */
  int IN = 129;
  /** RegularExpression Id. */
  int LIKE = 130;
  /** RegularExpression Id. */
  int IS = 131;
  /** RegularExpression Id. */
  int BETWEEN = 132;
  /** RegularExpression Id. */
  int CONTAINS = 133;
  /** RegularExpression Id. */
  int CONTAINSALL = 134;
  /** RegularExpression Id. */
  int CONTAINSKEY = 135;
  /** RegularExpression Id. */
  int CONTAINSVALUE = 136;
  /** RegularExpression Id. */
  int CONTAINSTEXT = 137;
  /** RegularExpression Id. */
  int MATCHES = 138;
  /** RegularExpression Id. */
  int KEY = 139;
  /** RegularExpression Id. */
  int INSTANCEOF = 140;
  /** RegularExpression Id. */
  int CLUSTER = 141;
  /** RegularExpression Id. */
  int IDENTIFIER = 142;
  /** RegularExpression Id. */
  int INDEX_IDENTIFIER = 143;
  /** RegularExpression Id. */
  int INDEXVALUES_IDENTIFIER = 144;
  /** RegularExpression Id. */
  int INDEXVALUESASC_IDENTIFIER = 145;
  /** RegularExpression Id. */
  int INDEXVALUESDESC_IDENTIFIER = 146;
  /** RegularExpression Id. */
  int CLUSTER_IDENTIFIER = 147;
  /** RegularExpression Id. */
  int METADATA_IDENTIFIER = 148;
  /** RegularExpression Id. */
  int LETTER = 149;
  /** RegularExpression Id. */
  int PART_LETTER = 150;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<SELECT>",
    "<TRAVERSE>",
    "<INSERT>",
    "<CREATE>",
    "<DELETE>",
    "<VERTEX>",
    "<EDGE>",
    "<UPDATE>",
    "<UPSERT>",
    "<FROM>",
    "<TO>",
    "<WHERE>",
    "<WHILE>",
    "<INTO>",
    "<VALUES>",
    "<SET>",
    "<ADD>",
    "<PUT>",
    "<MERGE>",
    "<CONTENT>",
    "<REMOVE>",
    "<INCREMENT>",
    "<AND>",
    "<OR>",
    "<NULL>",
    "<DEFINED>",
    "<ORDER>",
    "<GROUP>",
    "<BY>",
    "<LIMIT>",
    "<SKIP2>",
    "<OFFSET>",
    "<TIMEOUT>",
    "<ASC>",
    "<AS>",
    "<DESC>",
    "<FETCHPLAN>",
    "<RETURN>",
    "<BEFORE>",
    "<AFTER>",
    "<LOCK>",
    "<RECORD>",
    "<WAIT>",
    "<RETRY>",
    "<LET>",
    "<NOCACHE>",
    "<UNSAFE>",
    "<PARALLEL>",
    "<STRATEGY>",
    "<DEPTH_FIRST>",
    "<BREADTH_FIRST>",
    "<LUCENE>",
    "<UNWIND>",
    "\"@this\"",
    "<RECORD_ATTRIBUTE>",
    "<RID_ATTR>",
    "\"@class\"",
    "\"@version\"",
    "\"@size\"",
    "\"@type\"",
    "\"@raw\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<INTEGER_RANGE>",
    "\"true\"",
    "\"false\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"@\"",
    "\"$\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"<>\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"...\"",
    "\"..\"",
    "<NOT>",
    "<IN>",
    "<LIKE>",
    "<IS>",
    "<BETWEEN>",
    "<CONTAINS>",
    "<CONTAINSALL>",
    "<CONTAINSKEY>",
    "<CONTAINSVALUE>",
    "<CONTAINSTEXT>",
    "<MATCHES>",
    "<KEY>",
    "\"instanceof\"",
    "\"cluster\"",
    "<IDENTIFIER>",
    "<INDEX_IDENTIFIER>",
    "<INDEXVALUES_IDENTIFIER>",
    "<INDEXVALUESASC_IDENTIFIER>",
    "<INDEXVALUESDESC_IDENTIFIER>",
    "<CLUSTER_IDENTIFIER>",
    "<METADATA_IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\"#\"",
  };

}
