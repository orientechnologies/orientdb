<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright (c) 1999-2010 Luca Garulli - LICENSE: Apache 2.0 -->
<project basedir="." default="compile" name="orientdb-tests">
    <property name="project.jar-classpath" value="orientdb-client-${version}.jar orientdb-client-${version}.jar"/>
    <property name="project.src" value="src/test/java"/>
    <property name="project.build" value="target/test-classes"/>

    <import file="../_base/base-build.xml"/>

    <taskdef resource="testngtasks" classpath="lib/testng-5.10-jdk15.jar"/>


    <target name="test"
            depends="test-embedded, test-remote">
    </target>

    <target name="test-init">

        <pathconvert property="buildDirectory" targetos="unix">
            <path location="./target"/>
        </pathconvert>
        <pathconvert property="buildDirectory" targetos="windows">
            <path location=".\\target"/>
        </pathconvert>

        <pathconvert property="project.root.dir" targetos="unix">
            <path location="."/>
        </pathconvert>

        <pathconvert property="test.db.path" targetos="unix">
            <path location="${orient.path}/databases/demo"/>
        </pathconvert>

        <pathconvert property="project.root.dir" targetos="windows" dirsep="/">
            <path location="."/>
        </pathconvert>

        <pathconvert property="test.db.path" targetos="windows" dirsep="/">
            <path location="${orient.path}/databases/demo"/>
        </pathconvert>
        <echo>Normalized paths</echo>
        <echo>project.root.dir=${project.root.dir}</echo>
        <echo>test.path=${test.path}</echo>

        <condition property="test.storageType" value="plocal" else="memory">
            <and>
                <or>
                    <equals arg1="${orientdb.test.env}" arg2="ci" casesensitive="false"/>
                    <equals arg1="${orientdb.test.env}" arg2="release" casesensitive="false"/>
                </or>
            </and>
        </condition>

        <copy todir="${project.build}">
            <fileset dir="src/test/java">
                <include name="**/*.xml"/>
            </fileset>
        </copy>
    </target>


    <target name="test-embedded" depends="test-init">
        <echo>REMOVE FILES OF PREVIOUS INSTANCE OF TEST DATABASE</echo>
        <delete failonerror="false">
            <fileset dir="${test.db.path}" includes="**/*"/>
        </delete>
    	<!-- workaroud for command line property setting -->
		<condition property="serializer" value="-Ddb.document.serializer=${db.document.serializer}" else="-Dnone=none">
				<isset property="db.document.serializer" />
		</condition>

        <echo>EXECUTING TESTS USING EMBEDDED DATABASE ${test.storageType}:${test.db.path}</echo>

        <testng outputDir="target/test-output" haltOnFailure="true" verbose="2">
            <jvmarg value="-Xmx2G"/>
            <jvmarg value="-XX:+HeapDumpOnOutOfMemoryError"/>
            <jvmarg value="-DORIENTDB_ROOT_PASSWORD="/>
            <jvmarg value="-DORIENTDB_NODE_NAME="/>
            <jvmarg value="-Dstorage.lockTimeout=60000"/>
            <jvmarg value="-Dstorage.makeFullCheckpointAfterCreate=false"/>
            <jvmarg value="-Dstorage.makeFullCheckpointAfterOpen=false"/>
            <jvmarg value="-Dstorage.makeFullCheckpointAfterClusterCreate=false"/>
            <jvmarg value="-Dstorage.wal.syncOnPageFlush=false"/>
            <jvmarg value="-Dstorage.configuration.syncOnUpdate=false"/>
            <jvmarg value="-Dindex.flushAfterCreate=false"/>
            <jvmarg value="-DbuildDirectory=${buildDirectory}"/>
            <jvmarg value="-Durl=${test.storageType}:${test.db.path}"/>
            <jvmarg value="-DstorageType=${test.storageType}"/>
        	<jvmarg value="${serializer}" />
            <jvmarg value="-DtestPath=${project.root.dir}"/>
            <jvmarg value="-Ddb.makeFullCheckpointOnIndexChange=false"/>
            <jvmarg value="-Ddb.makeFullCheckpointOnSchemaChange=false"/>
            <!-- debug -->
            <!--<jvmarg value="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005"/>-->

            <classpath>
                <pathelement location="${project.build}"/>
                <fileset dir="${global.lib}">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="../test-commons/target">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
            <xmlfileset dir="${project.build}/com/orientechnologies/orient/test/database/auto"
                        includes="embedded-test-db-from-scratch.xml"/>
        </testng>
    </target>

    <target name="test-remote" depends="test-init">
        <echo>REMOVE FIlES OF PREVIOUS INSTANCE OF TEST DATABASE</echo>
        <delete failonerror="false">
            <fileset dir="${test.db.path}" includes="**/*"/>
        </delete>

        <echo>KILLING HANGING REMOTE ORIENTDB SERVER INSTANCES...</echo>

        <exec dir="${orient.path}/bin" executable="sh" spawn="true" osfamily="unix">
            <arg value="pkill -9 -f OServerMain"/>
        </exec>

    	<!-- workaroud for command line property setting -->
		<condition property="serializer" value="-Ddb.document.serializer=${db.document.serializer}" else="-Dnone=none">
				<isset property="db.document.serializer" />
		</condition>

    	<condition property="spareSerailizer" value="-Ddb.document.serializer=ORecordSerializerBinary" else="-Dnone=none">
			<isset property="spareSerialization" />
		</condition>

        <echo>STARTING REMOTE ORIENTDB SERVER INSTANCE...</echo>
        <exec dir="${orient.path}/bin" executable="cmd" spawn="true" osfamily="windows">
            <env key="JAVA_OPTS"
                 value="-Xmx3G -XX:+HeapDumpOnOutOfMemoryError -Djava.rmi.server.hostname=localhost -Dcom.sun.management.jmxremote.port=10005 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dstorage.makeFullCheckpointAfterCreate=false -Dstorage.makeFullCheckpointAfterClusterCreate=false -Dstorage.wal.syncOnPageFlush=false -Dstorage.configuration.syncOnUpdate=false -Dindex.flushAfterCreate=false ${serializer} -Ddb.makeFullCheckpointOnIndexChange=false -Ddb.makeFullCheckpointOnSchemaChange=false"/>
            <env key="CONFIG_FILE" value="${basedir}/src/test/resources/orientdb-server-config.xml"/>
            <arg value="/c start server.bat"/>
        </exec>

        <exec dir="${orient.path}/bin" executable="sh" spawn="true" osfamily="unix">
            <env key="JAVA_OPTS"
                 value="-Xmx3G -XX:+HeapDumpOnOutOfMemoryError -Djava.rmi.server.hostname=localhost -Dcom.sun.management.jmxremote.port=10005 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dstorage.makeFullCheckpointAfterCreate=false -Dstorage.makeFullCheckpointAfterClusterCreate=false -Dstorage.wal.syncOnPageFlush=false -Dstorage.configuration.syncOnUpdate=false -Dindex.flushAfterCreate=false ${serializer} ${spareSerailizer} -Ddb.makeFullCheckpointOnIndexChange=false -Ddb.makeFullCheckpointOnSchemaChange=false"/>
            <!-- <env key="JAVA_OPTS" value="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5006 -Xmx3G -XX:+HeapDumpOnOutOfMemoryError -Djava.rmi.server.hostname=localhost -Dcom.sun.management.jmxremote.port=10005 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dstorage.makeFullCheckpointAfterCreate=false -Dstorage.makeFullCheckpointAfterClusterCreate=false -Dstorage.wal.syncOnPageFlush=false -Dstorage.configuration.syncOnUpdate=false -Dindex.flushAfterCreate=false ${serializer} ${spareSerailizer} "/>-->
            <env key="CONFIG_FILE" value="${basedir}/src/test/resources/orientdb-server-config.xml"/>
            <arg value="./server.sh"/>
        </exec>

        <echo>WAITING FOR SERVER STARTUP...</echo>
        <sleep seconds="6"/>

        <echo>EXECUTING TESTS USING REMOTE DATABASE: remote:localhost/demo</echo>
        <testng outputDir="target/test-output" haltOnFailure="true">
            <jvmarg line="-DtestPath=${project.root.dir} -DstorageType=${test.storageType} -XX:+HeapDumpOnOutOfMemoryError -Xmx3G -DbuildDirectory=${buildDirectory} -Djava.rmi.server.hostname=localhost -Dorientdb.config.file=${basedir}/src/test/resources/orientdb-server-config.xml ${serializer} "/>

            <!-- debug -->
            <!--<jvmarg value="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005"/>-->

            <classpath>
                <pathelement location="${project.build}"/>
                <fileset dir="${global.lib}">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="../test-commons/target">
                    <include name="*.jar"/>
                </fileset>

            </classpath>

            <xmlfileset dir="${project.build}/com/orientechnologies/orient/test/database/auto"
                        includes="remote-test-db-from-scratch.xml"/>
        </testng>

        <echo>SHUTDOWNING THE SERVER...</echo>
        <exec dir="${orient.path}/bin" executable="cmd" spawn="true" osfamily="windows">
            <env key="CONFIG_FILE" value="${basedir}/src/test/resources/orientdb-server-config.xml"/>
            <arg value="/c shutdown.bat"/>
        </exec>

        <exec dir="${orient.path}/bin" executable="sh" spawn="true" osfamily="unix">
            <env key="CONFIG_FILE" value="${basedir}/src/test/resources/orientdb-server-config.xml"/>
            <arg value="./shutdown.sh"/>
        </exec>
    </target>

    <target name="reports" depends="test">
        <mkdir dir=""/>
        <junitreport todir="target/test-output">
            <fileset dir="target/test-output">
                <include name="*.xml"/>
            </fileset>
            <report format="noframes" todir="target/test-output"/>
        </junitreport>

    </target>

</project>
